[{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"all-pairs","dir":"Articles","previous_headings":"","what":"All pairs","title":"Introduction to zenplots","text":"zenplot can show information pairs plot two important display differences. First, matrix organization pairs layout replaced “zig-zag” layout zenplot. Second, number plots produced half pairs plot allowing plot zenplot given visual space.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"producing-all-pairs-with-pairviz","dir":"Articles","previous_headings":"All pairs","what":"Producing all pairs with PairViz","title":"Introduction to zenplots","text":"convenient function produce pairs can found PairViz package found cran installed R via install.packages(\"PairViz\"). illustrate functionality difference pairs plot zenplot first considering small dataset earthquakes variates. difference two plots becomes much important data larger numbers variates – illustrate difference using German data voting patterns two elections.","code":"library(PairViz)"},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"example-ground-acceleration-of-earthquakes","dir":"Articles","previous_headings":"All pairs > Producing all pairs with PairViz","what":"Example: Ground acceleration of earthquakes","title":"Introduction to zenplots","text":"built-R data set called attenu contains measurements estimate attenuating effect distance ground acceleration earthquakes California. 5 different variates used describe peak acceleration 23 California earthquakes measured different observation stations. data set contains 182 different peak acceleration measurements missing data. first cases data set look like variates interested pairs variates. get , first imagine graph nodes variates data. edge graph connects two nodes hence represents pair variates. interest lies pairs varates, graph complete graph – edge every pair nodes. ordering variate pairs corresponds path graph. ordering pairs variates, path must visit edges called Eulerian, Euler path. path always exists complete graphs odd number nodes; number nodes even, extra edges must added graph Eulerian can exist. complete graph n nodes, function eseq (Euler sequence) function PairViz package returns order nodes (numbered 1 n) can visited produce Euler path. works follows. terms variate names attenu, : Precomputed complete graph. sequence traces Eulerian path complete graph presents every variate next every variate somewhere order. Optional dependency: graph, graph, vignette can displayed Graphviz plot using plot() function method graphs Bioconductor package Rgraphviz. install locally: Rgraphviz package installed, graph produced follows:","code":"head(attenu) ##   event mag station dist accel ## 1     1 7.0     117   12 0.359 ## 2     2 7.4    1083  148 0.014 ## 3     2 7.4    1095   42 0.196 ## 4     2 7.4     283   85 0.135 ## 5     2 7.4     135  107 0.062 ## 6     2 7.4     475  109 0.054 ## [1] \"event\"   \"mag\"     \"station\" \"dist\"    \"accel\" ## Since attenu has 5 variates, the complete graph has n=5 nodes ## and an Euler sequence is given as eseq(5) ##  [1] 1 2 3 1 4 2 5 3 4 5 1 names(attenu)[eseq(5)] ##  [1] \"event\"   \"mag\"     \"station\" \"event\"   \"dist\"    \"mag\"     \"accel\"   ##  [8] \"station\" \"dist\"    \"accel\"   \"event\" if (!requireNamespace(\"BiocManager\", quietly=TRUE)) install.packages(\"BiocManager\") BiocManager::install(\"Rgraphviz\") library(Rgraphviz) mygraph <- PairViz::mk_complete_graph(names(attenu)) Rgraphviz::plot(mygraph)"},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"euler-sequences-via-zenpath","dir":"Articles","previous_headings":"All pairs > Producing all pairs with PairViz > Example: Ground acceleration of earthquakes","what":"Euler sequences via zenpath","title":"Introduction to zenplots","text":"functionality () PairViz bundled together zenplots package single function zenpath. example, sequence, still Eulerian, slightly different returned eseq(5). sequence chosen pairs involving first index appear earliest sequence, pairs involving second index, . call “front loaded” sequence identify zenpath argument method = \"front.loaded\". possibilities method = \"back.loaded\" method = \"balanced\" giving following sequences: differences easier see nodes. , show index ordering (top bottom) three methods graph 15 nodes, labelled”” “o” (make plotting easier). Starting bottom (back sequence), “back loading” last index, “o”, complete pairing every index “n” completes pairings. “n”’s pairings complete “m”, “m”’s “l”, last pairing “” “b” completed. Note last indices still appear end sequence (since sequence begins top display moves ). term “back loading” used double sense - later (back) indices pairings appear closely together possible towards back returned sequence. simple reversal, rev(zenpath(15, method = \"back.loaded\")), appear beginning sequence. case “back loading” one sense, namely later indexed (back) nodes appear first reversed sequence. Analogously, “front loading” first (front) indices appear front sequence pairings appear closely together possible. “balanced” case ensures indices appear block pairings. figure 7 blocks. three sequences Eulerian, meaning pairs appear somewhere sequence.","code":"zenpath(5) ##  [1] 5 1 2 3 1 4 2 5 3 4 5 ## Back loading ensures all pairs appear latest (back) for ## high values of the indices. zenpath(5, method = \"back.loaded\") ##  [1] 1 2 3 1 4 2 5 3 4 5 1 ## Frot loading ensures all pairs appear earliest (front) for ## low values of the indices. zenpath(5, method = \"front.loaded\") ##  [1] 5 1 2 3 1 4 2 5 3 4 5 ## Balanced loading ensures all pairs appear in groups of all ## indices (Hamiltonian paths -> a Hamiltonian decomposition of the Eulerian) zenpath(5, method = \"balanced\") ##  [1] 1 2 3 5 4 1 3 4 2 5 1"},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"pairs-plots-versus-zenplots","dir":"Articles","previous_headings":"All pairs > Producing all pairs with PairViz > Example: Ground acceleration of earthquakes","what":"Pairs plots versus zenplots","title":"Introduction to zenplots","text":"Eulerian sequences can now used compare pairs plot zenplot pairs variates displayed. First pairs plot:  now effect display pairs using zenplot.  display shows scatterplot choose(5,2) = 10 pairs variates data. display occupies total area. pairs plot displayed twice arranged symmetric matrix layout variate labels appearing along diagonal. makes easy look-uses lot space. zenplot, plot appears coordinate defining variates appearing labels horizontal (top bottom) vertical (left right) axis positions. layout follows order variates variates appear call zenplot beginning top left corner display zig-zagging top left bottom right; rightmost boundary display reached, direction reversed horizontally zigzag moves top right bottom left. following display illustrates pattern (simply calling zenplot):  zig zag pattern plots appears follows. top left plot (either zenplot display) horizontal variate event vertical variate mag. right plot sharing vertical variate mag now horizontal variate station. Note variate station missing values recorded label station (NA). plot appears horizontal variate station now vertical variate event. Since first repeat appearance event appears suffix event.1. right plot shared vertical variate event new horizontal variate dist. plot shared horizontal variate dist vertical variate first repeat variate mag. right plot shared vertical variate mag new horizontal variate accel. right edge display reached zigzag changes horizontal direction repeating pattern either left edge reached (whereupon horizontal direction reversed) variates exhausted. Like pairs plot, zenplot lays plots two dimensional grid – argument n2dcol=4 specifies number columns 2d plots (e.g. scatterplots). shown, can lead lot unused space display. zenplot layout can made compact different choices argument n2dcol (odd values provide compact layout). example,  default, zenplot tries determine value n2dcol minimizes space unused zigzag layout. layout directions  direction arrows show, default layout zigzag horizontally first much possible. clearly much compact display. , axes shared wherever label appears plots. Unless explicitly specified, value n2dcol determined aregument scaling can either numerical value specifying ratio height width zenplot layout string describing page whose ratio height width used. possible strings letter'' (default),square’‘, A4'',golden’’ (golden ratio), ``legal’’.","code":"## We remove the space between plots and suppress the axes ## so as to give maximal space to the individual scatterplots. ## We also choose a different plotting character and reduce ## its size to better distinguish points. pairs(attenu, oma=rep(0,4), gap=0, xaxt=\"n\", yaxt=\"n\") ## Plotting character and size are chosen to match that ## of the pairs plot. ## zenpath ensures that all pairs of variates appear ## in the zenplot. ## The last argument, n2dcol, is chosen so that the zenplot ## has the same number of plots across the page as does the ## pairs plot. zenplot(attenu[, zenpath(ncol(attenu))], n2dcol=4) ## Call zenplot exactly as before, except that each scatterplot is replaced ## by an arrow that shows the direction of the layout. zenplot(attenu[, zenpath(ncol(attenu))], plot2d=\"arrow\", n2dcol=4) ## The default n2dcol is used zenplot(attenu[, zenpath(ncol(attenu))], n2dcol=5) ## The default n2dcol is used zenplot(attenu[, zenpath(ncol(attenu))]) ## The directions zenplot(attenu[, zenpath(ncol(attenu))], plot2d=\"arrow\")"},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"visual-search","dir":"Articles","previous_headings":"All pairs > Producing all pairs with PairViz","what":"Visual search","title":"Introduction to zenplots","text":"display arrangement scatterplot matrix facilitates lookup scatterplot particular pair variates simply identifying corresponding row columns. scatterplot matrix also simplifies visual comparison one variate several others scanning along single row (column). Note however single row scan come price doubling number scatterplots display. two visual search facilities diminished layout zenplot. Although information available zenplot layout lend easy lookup variates plots. zenplot layout used interactive graphical system, means interaction implemented , example, plots containing particular variate (pair variates) distinguish visually background colour change temporarily. hand, reverse lookup plot variates simpler zenplot scatterplot matrix, particularly large numbers variates. layouts allow visual search patterns point configurations. many plots presented enables quick visual search large space existence interesting point configurations (e.g. correlations, outliers, grouping data, lines, etc.). number plots large, efficient compact layout can dramatically increase size visual search space. zenplot’s zigzag layout outperforms scatterplot matrix. illustrated following example.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"example-german-election-data","dir":"Articles","previous_headings":"All pairs > Producing all pairs with PairViz","what":"Example: German election data","title":"Introduction to zenplots","text":"zenplots package data set de_elect contains district results two German federal elections (2002 2005) well number socio-economic variates well. 299 districts 68 variates yielding possible choose(68,2) = 2278 different scatterplots. many scatterplots overwhelm pairs plot. compact form, pairs plot first 34 variates already occupies fair bit space: (N.B. execute large plots simply keep storage needs vignette minimum. encourage reader execute code however .) execute code see interesting point configurations including: strong positive correlations, positive negative correlations, non-linear relations, existence outlying points, clustering, striation, etc. scatterplot matrix half variates shows choose(34,2) = 561 different scatterplots, one twice. display 1122 plots, one quarter 2278 pairwise variate scatterplots available data set appear display. second scatterplot matrix remaining 34 variates also show quarter plots. remaining half, 34×34=115634 \\times 34 = 1156 plots, missing plots. contrast, zenplot shows 2278 plots . fact, Eulerian sequence requires graph even (.e. node even number edges), whenever number variates, pp, even zenpath(...) repeat exactly p/2p/2 pairs somewhere sequence returns. produce zenplot pairs variates German election data call zenplot(de_elect[,zenpath(68)], pch=\".\"). (, don’t produce minimize storage footprint vignette.) approximately visual space scatterplot matrix (showing 561 unique plots), zenplot efficiently compactly laid 2278 different plots plus r ncol(de_elect) duplicate plots. efficient layout means zenplot can facilitate visual search interesting point configurations much larger collections variate pairs – case German election data, possible pairs variates presented simultaneously. contrast, pairs loses detail","code":"## Access the German election data from zenplots package data(de_elect) ## pairs(de_elect[,1:34], oma=rep(0,4), gap=0, pch=\".\", xaxt=\"n\", yaxt=\"n\") ## Try invoking the plot with the following ## zenplot(de_elect[,zenpath(68)], pch=\".\", n2dcol=\"square\",col=adjustcolor(\"black\",0.5)) ## pairs(de_elect, oma=rep(0,4), gap=0, pch=\".\", xaxt=\"n\", yaxt=\"n\",col=adjustcolor(\"black\",0.5))"},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"groups-of-pairwise-plots","dir":"Articles","previous_headings":"","what":"Groups of pairwise plots","title":"Introduction to zenplots","text":"Zenplots also accomodate list data sets whose pairwise contents displayed. need can arise quite naturally many applications. German election data, instance, contains socio-economic data whose variates naturally group together. example, might gather variates related education one group related employment another. plot pairs two groups single zenplot.  pairs education variates plotted first zigzag order followed blank plot continuing zigzag pattern plots pairs employment variates.","code":"Education <- c(\"School.finishers\",                \"School.wo.2nd\", \"School.2nd\",                \"School.Real\",  \"School.UED\") Employment <- c(\"Employed\", \"FFF\", \"Industry\",                 \"CTT\", \"OS\" ) EducationData <- de_elect[, Education] EmploymentData <- de_elect[, Employment]  ## Plot all pairs within each group zenplot(list(Educ= EducationData[, zenpath(ncol(EducationData))],              Empl= EmploymentData[, zenpath(ncol(EmploymentData))]))"},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"all-pairs-by-group","dir":"Articles","previous_headings":"Groups of pairwise plots","what":"All pairs by group","title":"Introduction to zenplots","text":"addition Education Employment groups , number different groupings variates shared context. example, might include following: groups can now used explore internal group relations many different groups plot. following helper function comes handy.  pairs within group presented following zigzag pattern; group separated empty plot. zenplot provides quick overview pairwise relationships variates within groups. plot can improved using shorter names variates. little work can replace within group x.","code":"## Grouping variates in the German election data Regions <- c(\"District\", \"State\", \"Density\") PopDist <- c(\"Men\", \"Citizens\", \"Pop.18.25\", \"Pop.25.35\",              \"Pop.35.60\", \"Pop.g.60\") PopChange <- c(\"Births\", \"Deaths\", \"Move.in\", \"Move.out\", \"Increase\") Agriculture <- c(\"Farms\", \"Agriculture\") Mining <- c(\"Mining\", \"Mining.employees\") Apt <- c(\"Apt.new\", \"Apt\") Motorized <- c(\"Motorized\") Education <- c(\"School.finishers\",                \"School.wo.2nd\", \"School.2nd\",                \"School.Real\",  \"School.UED\") Unemployment <- c(\"Unemployment.03\", \"Unemployment.04\") Employment <- c(\"Employed\", \"FFF\", \"Industry\", \"CTT\", \"OS\" ) Voting.05 <- c(\"Voters.05\", \"Votes.05\", \"Invalid.05\", \"Valid.05\") Voting.02 <- c(\"Voters.02\", \"Votes.02\", \"Invalid.02\", \"Valid.02\") Voting <- c(Voting.02, Voting.05) VotesByParty.02 <- c(\"Votes.SPD.02\", \"Votes.CDU.CSU.02\", \"Votes.Gruene.02\",                      \"Votes.FDP.02\", \"Votes.Linke.02\") VotesByParty.05 <- c(\"Votes.SPD.05\", \"Votes.CDU.CSU.05\", \"Votes.Gruene.05\",                      \"Votes.FDP.05\", \"Votes.Linke.05\") VotesByParty <- c(VotesByParty.02, VotesByParty.05) PercentByParty.02 <- c(\"SPD.02\", \"CDU.CSU.02\", \"Gruene.02\",                        \"FDP.02\", \"Linke.02\", \"Others.02\") PercentByParty.05 <- c(\"SPD.05\", \"CDU.CSU.05\", \"Gruene.05\",                        \"FDP.05\", \"Linke.05\", \"Others.05\") PercentByParty <- c(PercentByParty.02, PercentByParty.05) groups <- list(Regions=Regions, Pop=PopDist,                Change = PopChange, Agric=Agriculture,                Mining=Mining, Apt=Apt,  Cars=Motorized,                Educ=Education, Unemployed=Unemployment, Employed=Employment#,                # Vote02=Voting.02, Vote05=Voting.05,                # Party02=VotesByParty.02, Party05=VotesByParty.05,                # Perc02=PercentByParty.02, Perc05=PercentByParty.05                )  group_paths <- lapply(groups, FUN= function(g) g[zenpath(length(g), method = \"front.loaded\")] ) x <- groupData(de_elect, indices=group_paths)  zenplot(x, pch = \".\", cex=0.7, col = \"grey10\") # ## Grouping variates in the German election data RegionsShort <- c(\"ED\", \"State\", \"density\") PopDistShort <- c(\"men\", \"citizen\", \"18-25\", \"25-35\", \"35-60\", \"> 60\") PopChangeShort <- c(\"births\", \"deaths\", \"in\", \"out\", \"up\") AgricultureShort <- c(\"farms\", \"hectares\") MiningShort <- c(\"firms\", \"employees\") AptShort <- c(\"new\", \"all\") TransportationShort <- c(\"cars\") EducationShort <- c(\"finishers\", \"no.2nd\", \"2nd\", \"Real\", \"UED\") UnemploymentShort<- c(\"03\", \"04\") EmploymentShort <- c(\"employed\", \"FFF\", \"Industry\", \"CTT\", \"OS\" ) Voting.05Short <- c(\"eligible\", \"votes\", \"invalid\", \"valid\") Voting.02Short <- c(\"eligible\", \"votes\", \"invalid\", \"valid\") VotesByParty.02Short <- c(\"SPD\", \"CDU.CSU\", \"Gruene\", \"FDP\", \"Linke\") VotesByParty.05Short <- c(\"SPD\", \"CDU.CSU\", \"Gruene\", \"FDP\", \"Linke\") PercentByParty.02Short <- c(\"SPD\", \"CDU.CSU\", \"Gruene\", \"FDP\", \"Linke\", \"rest\") PercentByParty.05Short <-  c(\"SPD\", \"CDU.CSU\", \"Gruene\", \"FDP\", \"Linke\", \"rest\")  shortNames <- list(RegionsShort, PopDistShort, PopChangeShort, AgricultureShort,                    MiningShort, AptShort, TransportationShort, EducationShort,                    UnemploymentShort, EmploymentShort, Voting.05Short, Voting.02Short,                    VotesByParty.02Short, VotesByParty.05Short, PercentByParty.02Short,                    PercentByParty.05Short) # Now replace the names in x by these.  nGroups <- length(x)  for (i in 1:nGroups) {   longNames <- colnames(x[[i]])   newNames <- shortNames[[i]]   oldNames <- groups[[i]]   #print(longNames)   #print(newNames)   for (j in 1:length(longNames)) {     for (k in 1:length(newNames)) {       if (grepl(oldNames[k], longNames[j])) {         longNames[longNames == longNames[j]] <- newNames[k]       }     }   }   colnames(x[[i]]) <- longNames }  zenplot(x, pch = \".\", cex=0.75)"},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"crossing-pairs-between-groups","dir":"Articles","previous_headings":"Groups of pairwise plots","what":"Crossing pairs between groups","title":"Introduction to zenplots","text":"can also interest compare variates groups. example, compare various levels education employment categories.","code":"crossedGroups <- c(Employment, Education) crossedPaths <- zenpath(c(length(Employment), length(Education)), method=\"eulerian.cross\") zenplot(de_elect[,crossedGroups][crossedPaths])"},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"other-plots","dir":"Articles","previous_headings":"","what":"Other plots","title":"Introduction to zenplots","text":"zenplot can thought taking data set whose variates plotted order given. sequence one dimensional plots, determined argument plot1d, constructed order variates. pair 1d plots, two dimensional plot constructed variates 1d plots. One variate provides vertical y values horizontal x values. orientation preceding one-dimensional plot horizontal, variate gives x values; ’s vertical vertical y coordinates.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"built-in-1d-and-2d-plots","dir":"Articles","previous_headings":"Other plots","what":"Built in 1d and 2d plots","title":"Introduction to zenplots","text":"actual displays depend arguments plot1d plot2d. numerous built-choices provided. plot1d following strings may selected produce one-dimensional plot: \"label\", \"rug\", \"points\", \"jitter\", \"density\", \"boxplot\", \"hist\", \"arrow\", \"rect\", \"lines\". first list default. plot2d following strings can given: \"points\", \"density\", \"axes\", \"label\", \"arrow\", \"rect\". , first default value.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"arbitrary-layout-using-turns","dir":"Articles","previous_headings":"Other plots","what":"Arbitrary layout using turns","title":"Introduction to zenplots","text":"example, produce boxplot measured variates earthquake data follows:  things note . First every variate data set boxplot values presented extent boxplot display variate’s range. Second, argument specification plot2d=NULL causes null plot produced variate pairs. Third, arguments width1d width2d determine relative widths two displays. Finally, argument turns determines layout plots specifying next display (1d 2d) appear relation current one. every display appears right existing display. alternative layout boxplots can adjusting turns.  better see turns work, arrows used instead show directions turns.  Adding rectangle outline drawing space make layout little clearer illustrate arguments passed pne two dimensional plot functions.  red arrows turns 1d plots, blue dashed arrows 2d plots. turns interlaced begin topmost red arrow 1d plot. points right, matching first turn \"r\" list turns. remaining arrows follow clockwise order. can seen, arrow plot: red 1d plots, black 2d plots.","code":"earthquakes <- attenu[, c(1,2,4,5)]  # ignore the station id zenplot(earthquakes,         plot1d=\"boxplot\", plot2d=NULL,         width1d=5, width2d=1,         turns=c(\"r\",\"r\",\"r\",\"r\",\"r\",\"r\",\"r\")) zenplot(earthquakes,         plot1d=\"boxplot\", plot2d=NULL,         width1d=1, width2d=1,  # now widths must be the same         turns=c(\"r\",\"d\",\"d\",\"l\",\"l\",\"u\",\"u\")) zenplot(earthquakes,         plot1d= \"arrow\", plot2d=\"arrow\",         width1d=1, width2d=2,         turns=c(\"r\",\"d\",\"d\",\"l\",\"l\",\"u\",\"u\")) zenplot(earthquakes,         plot1d = function(zargs, ...) {           rect_1d_graphics(zargs,  ...)           arrow_1d_graphics(zargs, col=\"firebrick\", lwd=3, add=TRUE, ...)         },         plot2d = function(zargs, ...) {           rect_2d_graphics(zargs,  ...)           arrow_2d_graphics(zargs, col=\"steelblue\", lwd=3, lty=2, add=TRUE, ...)         },         width1d = 1, width2d = 2,         turns=c(\"r\",\"d\",\"d\",\"l\",\"l\",\"u\",\"u\"))"},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"arbitrary-plots","dir":"Articles","previous_headings":"Other plots","what":"Arbitrary plots","title":"Introduction to zenplots","text":"example also introduces important features zenplot. value \"arrow\" plot2d argument caused arrow drawn wherever 2d plot appear direction turn associated plot. value plot1d suggests, argument also function. fact, given string value plot2d, zenplot calls function whose name constructed string. case plot2d = \"arrow\", zenplot calls function arrow_2d_graphics produce 2d plot whenever one required. naming convention constructs function name string supplied, “arrow”, dimensionality plot (2d) R graphics package used (base graphics package). function name called arguments appropriate draw plot. construction also used string given value plot1d argument. example plot1d = \"arrow\" causes function named arrow_1d_graphics called draw 1d plots. , example, user wish extend base functionality zenplot include say \"myplot\", need write functions myplot_1d_graphics /myplot_2d_graphics allow value \"myplot\" used plot1d /plot2d base graphics package R. Note two R plotting packages besides base graphics supported zenplot, namely either highly customizable grid package highly interactive loon package. default package graphics either two may specified via pkg argument zenplot pkg = \"grid\" pkg = \"loon\". zenplot called plot1d=\"arrow\", say, one functions arrow_1d_graphics, arrow_1d_grid, arrow_1d_loon called upon depending value argument pkg. means true extension zenplot include, say, plot1d = \"myplot\" require writing three functions, namely myplot_1d_graphics, myplot_1d_grid, myplot_1d_loon, complete functionality. often, shown boxplot example, one-functionality might required either plot2d plot1d. case, function passed argument value used zenplot construct corresponding plots. boxplot example, default functions boxplot_1d_graphics arrow_1d_graphics called one plotted top 1d plot zenplot.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"example-mixing-plots-to-assess-distributions","dir":"Articles","previous_headings":"Other plots > Arbitrary plots","what":"Example: mixing plots to assess distributions","title":"Introduction to zenplots","text":"zenplot can used layout graphics produced three pkg (.e. graphics, grid, loon) provided graphics used package. example, suppose interested marginal distributions earthquake data. might craft following plot investigate marginal distributions compare marginal every (.e. pairs).  using function qqtest package name whose display capability built using base graphics package. 2d data qqtest compares two empirical distributions drawing empirical quantile-quantile plot near straight line marginal distributions shape. empirical quantile-quantile plot supplemented simulated values empirical quantiles empirical distribution horizontal variate. results 1,000 draws distribution shown shades grey qqplot. 1d plots shown histograms coloured \"grey\" histogram used generate simulated values \"steelblue\" histogram . can seen qqplots, since numerous points outside gray envelopes plot, two marginal distributions appear alike.","code":"library(qqtest) zenplot(earthquakes[,zenpath(ncol(earthquakes))],         width1d = 1, width2d = 2, n2dcol=5,         plot1d = function(zargs, ...) {           r <- extract_1d(zargs) # extract arguments for 1d           col <- adjustcolor(if (r$horizontal) \"firebrick\" else \"steelblue\",                              alpha.f = 0.7)           hist_1d_graphics(zargs, col=col, ...)           },         plot2d=function(zargs, ...) {           r <- extract_2d(zargs) # extract arguments for 2d           x <- as.matrix(r$x)           xlim <- r$xlim           y <- as.matrix(r$y)           ylim <- r$ylim           qqtest(y, dataTest=x,                  xlim=xlim, ylim=ylim,                  cex=0.3, col=\"black\",  pch=19,                  legend=FALSE, main=\"\", axes=FALSE, ...)            })"},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"arguments-to-plot1d-functions","dir":"Articles","previous_headings":"Other plots","what":"Arguments to plot1d functions","title":"Introduction to zenplots","text":"Every plot1d function must take arbitrarily many arguments, accepting least following set: x, vector values single variate horizontal, TRUE 1d plot horizontal, plotAsp, aspect ratio plot (.e. smaller/larger side ration [0,1]) turn, single character turn current plot plotID, list containing information identification plot. plot1d function package grid, also expect receive vp viewport argument; package loon, might also receive parent argument. arguments familiar users either package. plot1d function, plotID consists group, number group 1d plot placed, number.within.group, within group index variate, index , index variate among variates data set(s) label, variate label, plotNo, number 1d plot displayed (.e position order among 1d). functions ellipsis, ..., passed drawing functions.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/articles/intro.html","id":"arguments-to-plot2d-functions","dir":"Articles","previous_headings":"Other plots","what":"Arguments to plot2d functions","title":"Introduction to zenplots","text":"Every plot2d function must take arbitrarily many arguments, accepting least following set: x, vector values horizontal variate y, vector values vertical variate turn, single character turn current plot plotID, list containing information identification plot. plot2d function package grid, also expect receive vp viewport argument; package loon, might also receive parent argument. arguments familiar users either package. plot2d function, plotID consists group, number group 2d plot placed, number.within.group, within group index variates (index), index , indices variates among variates data set(s) label, labels variates, plotNo, number 2d plot displayed (.e position order among 2d). functions ellipsis, ..., passed drawing functions.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/articles/selected_features.html","id":"zenplots","dir":"Articles","previous_headings":"","what":"2. Zenplots","title":"Zigzag expanded navigation plots in R: The R package zenplots","text":"example data, use olive data set: Reproducing plots Figure 1:   Considering str()ucture zenplot() (formatted nicer output):","code":"data(olive, package = \"zenplots\") zenplot(olive) zenplot(olive, plot1d = \"layout\", plot2d = \"layout\") str(zenplot) function (x, turns = NULL, first1d = TRUE, last1d = TRUE,           n2dcols = c(\"letter\", \"square\", \"A4\", \"golden\", \"legal\"),           n2dplots = NULL,           plot1d = c(\"label\", \"points\", \"jitter\", \"density\", \"boxplot\",                      \"hist\", \"rug\", \"arrow\", \"rect\", \"lines\", \"layout\"),           plot2d = c(\"points\", \"density\", \"axes\", \"label\", \"arrow\",                      \"rect\", \"layout\"),           zargs = c(x = TRUE, turns = TRUE, orientations = TRUE,                     vars = TRUE, num = TRUE, lim = TRUE, labs = TRUE,                     width1d = TRUE, width2d = TRUE,                     ispace = match.arg(pkg) != \"graphics\"),           lim = c(\"individual\", \"groupwise\", \"global\"),           labs = list(group = \"G\", var = \"V\", sep = \", \", group2d = FALSE),           pkg = c(\"graphics\", \"grid\", \"loon\"),           method = c(\"tidy\", \"double.zigzag\", \"single.zigzag\"),           width1d = if (is.null(plot1d)) 0.5 else 1,           width2d = 10,           ospace = if (pkg == \"loon\") 0 else 0.02,           ispace = if (pkg == \"graphics\") 0 else 0.037, draw = TRUE, ...)"},{"path":"https://great-northern-diver.github.io/zenplots/articles/selected_features.html","id":"layout","dir":"Articles","previous_headings":"2. Zenplots","what":"2.1 Layout","title":"Zigzag expanded navigation plots in R: The R package zenplots","text":"investigate layout options zenplots bit , need larger data set. end simply double olive data (obviously illustration purposes): Reproducing plots Figure 2:    Note also method = \"rectangular\" (leaving zigzagging zenplot paradigm useful laying 2d plots necessarily connected variable; note case, omit 1d plots default (labels) rather confusing example):  Reproducing plots Figure 3:","code":"olive2 <- cbind(olive, olive) # just for this illustration zenplot(olive2, n2dcols = 6, plot1d = \"layout\", plot2d = \"layout\",         method = \"single.zigzag\") zenplot(olive2, n2dcols = 6, plot1d = \"layout\", plot2d = \"layout\",         method = \"double.zigzag\") zenplot(olive2, n2dcols = 6, plot1d = \"layout\", plot2d = \"layout\",         method = \"tidy\") zenplot(olive2, n2dcols = 6, plot1d = \"arrow\", plot2d = \"layout\",         method = \"rectangular\") zenplot(olive, plot1d = \"layout\", plot2d = \"layout\", method = \"double.zigzag\",         last1d = FALSE, ispace = 0.1) zenplot(olive, plot1d = \"layout\", plot2d = \"layout\", n2dcol = 4, n2dplots = 8,         width1d = 2, width2d = 4)"},{"path":"https://great-northern-diver.github.io/zenplots/articles/selected_features.html","id":"zenpaths","dir":"Articles","previous_headings":"","what":"3. Zenpaths","title":"Zigzag expanded navigation plots in R: The R package zenplots","text":"basic path (standing sequence pairs (1,2), (2,3), (3,4), (4,5)): zenpath pairs variables (Eulerian): dataMat five-column matrix, zenplot pairs constructed follows: str()ucture zenpath() (formatted nicer output): methods five variables: following method considers two groups: One size three, size five. sequence pairs constructed first variable comes first group, second second. Reproducing Figure 4:","code":"(path <- 1:5) ## [1] 1 2 3 4 5 (path <- zenpath(5)) ##  [1] 5 1 2 3 1 4 2 5 3 4 5 zenplot(x = dataMat[,path]) str(zenpath) function (x, pairs = NULL,           method = c(\"front.loaded\", \"back.loaded\", \"balanced\",                      \"eulerian.cross\", \"greedy.weighted\", \"strictly.weighted\"),           decreasing = TRUE) zenpath(5, method = \"front.loaded\") ##  [1] 5 1 2 3 1 4 2 5 3 4 5 zenpath(5, method = \"back.loaded\") ##  [1] 1 2 3 1 4 2 5 3 4 5 1 zenpath(5, method = \"balanced\") ##  [1] 1 2 3 5 4 1 3 4 2 5 1 zenpath(c(3,5), method = \"eulerian.cross\") ##  [1] 1 4 2 5 1 6 2 7 1 8 3 4 3 6 7 3 5 8 2 oliveAcids <- olive[, !names(olive) %in% c(\"Area\", \"Region\")] # acids only zpath <- zenpath(ncol(oliveAcids)) # all pairs zenplot(oliveAcids[, zpath], plot1d = \"hist\", plot2d = \"density\")"},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/articles/selected_features.html","id":"custom-layout-and-plots-a-spiral-of-ggplots-example","dir":"Articles","previous_headings":"4. Build your own zenplots","what":"4.3 Custom layout and plots – a spiral of ggplots example","title":"Zigzag expanded navigation plots in R: The R package zenplots","text":"Figure 5 can reproduced follows (note show plot due CRAN issue running vignette):","code":"path <- c(1,2,3,1,4,2,5,1,6,2,7,1,8,2,3,4,5,3,6,4,7,3,8,4,5,6,7,5,8,6,7,8) turns <- c(\"l\",            \"d\",\"d\",\"r\",\"r\",\"d\",\"d\",\"r\",\"r\",\"u\",\"u\",\"r\",\"r\",\"u\",\"u\",\"r\",\"r\",            \"u\",\"u\",\"l\",\"l\",\"u\",\"u\",\"l\",\"l\",\"u\",\"u\",\"l\",\"l\",\"d\",\"d\",\"l\",\"l\",            \"u\",\"u\",\"l\",\"l\",\"d\",\"d\",\"l\",\"l\",\"d\",\"d\",\"l\",\"l\",\"d\",\"d\",\"r\",\"r\",            \"d\",\"d\",\"r\",\"r\",\"d\",\"d\",\"r\",\"r\",\"d\",\"d\",\"r\",\"r\",\"d\",\"d\")  library(ggplot2) # for ggplot2-based 2d plots stopifnot(packageVersion(\"ggplot2\") >= \"2.2.1\") # need 2.2.1 or higher ggplot2d <- function(zargs) {   r <- extract_2d(zargs)   num2d <- zargs$num/2   df <- data.frame(x = unlist(r$x), y = unlist(r$y))   p <- ggplot() +     geom_point(data = df, aes(x = x, y = y), cex = 0.1) +     theme(axis.line = element_blank(),           axis.ticks = element_blank(),           axis.text.x = element_blank(),           axis.text.y = element_blank(),           axis.title.x = element_blank(),           axis.title.y = element_blank())   if(num2d == 1) p <- p +     theme(panel.background = element_rect(fill = 'royalblue3'))   if(num2d == (length(zargs$turns)-1)/2) p <- p +     theme(panel.background = element_rect(fill = 'maroon3'))   ggplot_gtable(ggplot_build(p)) }  zenplot(as.matrix(oliveAcids)[,path], turns = turns, pkg = \"grid\",         plot2d = function(zargs) ggplot2d(zargs))"},{"path":"https://great-northern-diver.github.io/zenplots/articles/selected_features.html","id":"data-groups","dir":"Articles","previous_headings":"4. Build your own zenplots","what":"4.4 Data groups","title":"Zigzag expanded navigation plots in R: The R package zenplots","text":"Split olive data set three groups (according variable Area): Reproducing plots Figure 6 (note lim = \"groupwise\" make much sense plot):","code":"oliveAcids.by.area <- split(oliveAcids, f = olive$Area) # Replace the \".\" by \" \" in third group's name names(oliveAcids.by.area)[3] <- gsub(\"\\\\.\", \" \", names(oliveAcids.by.area)[3]) names(oliveAcids.by.area) ## [1] \"North-Apulia\"    \"Calabria\"        \"South-Apulia\"    \"Sicily\"          ## [5] \"Inland-Sardinia\" \"Coast-Sardinia\"  \"East-Liguria\"    \"West-Liguria\"    ## [9] \"Umbria\" zenplot(oliveAcids.by.area, labs = list(group = NULL)) zenplot(oliveAcids.by.area, lim = \"groupwise\", labs = list(sep = \" - \"),         plot1d = function(zargs) label_1d_graphics(zargs, cex = 0.8),         plot2d = function(zargs)             points_2d_graphics(zargs, group... = list(sep = \"\\n - \\n\")))"},{"path":"https://great-northern-diver.github.io/zenplots/articles/selected_features.html","id":"custom-zenpaths","dir":"Articles","previous_headings":"4. Build your own zenplots","what":"4.5 Custom zenpaths","title":"Zigzag expanded navigation plots in R: The R package zenplots","text":"Find “convexity” scagnostic pair olive acids. Show six pairs largest “convexity” scagnostic: Extract corresponding pairs: Precomputed complete graph. Optional dependency: graph, graph, vignette can displayed Graphviz plot using plot() function method graphs Bioconductor package Rgraphviz. install locally: installed, graph reproduced via following code: Connect : Build corresponding list matrices: Reproducing Figure 8 (zenplot six pairs acids largest “convexity” scagnostic):","code":"library(scagnostics) Y <- scagnostics(oliveAcids) # compute scagnostics (scatter-plot diagonstics) X <- Y[\"Convex\",] # pick out component 'convex' d <- ncol(oliveAcids) M <- matrix(NA, nrow = d, ncol = d) # matrix with all 'convex' scagnostics M[upper.tri(M)] <- X # (i,j)th entry = scagnostic of column pair (i,j) of oliveAcids M[lower.tri(M)] <- t(M)[lower.tri(M)] # symmetrize round(M, 5) ##         [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8] ## [1,]      NA 0.48952 0.46343 0.45887 0.43914 0.34583 0.31259 0.28413 ## [2,] 0.48952      NA 0.42276 0.50499 0.44591 0.35855 0.35846 0.31729 ## [3,] 0.46343 0.42276      NA 0.39700 0.36394 0.31316 0.29534 0.33709 ## [4,] 0.45887 0.50499 0.39700      NA 0.46454 0.36616 0.29451 0.34888 ## [5,] 0.43914 0.44591 0.36394 0.46454      NA 0.31977 0.31443 0.36750 ## [6,] 0.34583 0.35855 0.31316 0.36616 0.31977      NA 0.53726 0.34001 ## [7,] 0.31259 0.35846 0.29534 0.29451 0.31443 0.53726      NA 0.22231 ## [8,] 0.28413 0.31729 0.33709 0.34888 0.36750 0.34001 0.22231      NA zpath <- zenpath(M, method = \"strictly.weighted\") # list of ordered pairs head(M[do.call(rbind, zpath)]) # show the largest six 'convexity' measures ## [1] 0.5372599 0.5049945 0.4895179 0.4645377 0.4634277 0.4588675 (ezpath <- extract_pairs(zpath, n = c(6, 0))) # extract the first six pairs ## [[1]] ## [1] 7 6 ##  ## [[2]] ## [1] 4 2 ##  ## [[3]] ## [1] 2 1 ##  ## [[4]] ## [1] 5 4 ##  ## [[5]] ## [1] 3 1 ##  ## [[6]] ## [1] 4 1 if (!requireNamespace(\"BiocManager\", quietly=TRUE)) install.packages(\"BiocManager\") BiocManager::install(\"Rgraphviz\") library(graph) library(Rgraphviz) plot(graph_pairs(ezpath)) # depict the six most convex pairs (edge = pair) (cezpath <- connect_pairs(ezpath)) # keep the same order but connect the pairs ## [[1]] ## [1] 7 6 ##  ## [[2]] ## [1] 4 2 1 ##  ## [[3]] ## [1] 5 4 ##  ## [[4]] ## [1] 3 1 4 oliveAcids.grouped <- groupData(oliveAcids, indices = cezpath) # group data for (zen)plotting zenplot(oliveAcids.grouped)"},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/articles/selected_features.html","id":"the-structure-of-a-zenplot","dir":"Articles","previous_headings":"5. Advanced features","what":"5.1 The structure of a zenplot","title":"Zigzag expanded navigation plots in R: The R package zenplots","text":"structure return object zenplot(): Let’s look components. occupancy matrix encodes occupied cells rectangular layout: two-column matrix positions contains ith row row column index (occupancy matrix) ith plot:","code":"res <- zenplot(olive, plot1d = \"layout\", plot2d = \"layout\", draw = FALSE) str(res) ## List of 2 ##  $ path  :List of 3 ##   ..$ turns    : chr [1:19] \"d\" \"r\" \"r\" \"d\" ... ##   ..$ positions: num [1:19, 1:2] 1 2 2 2 3 4 4 4 5 6 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : NULL ##   .. .. ..$ : chr [1:2] \"x\" \"y\" ##   ..$ occupancy: chr [1:8, 1:6] \"\" \"\" \"\" \"\" ... ##  $ layout:List of 6 ##   ..$ orientations : chr [1:19] \"h\" \"s\" \"v\" \"s\" ... ##   ..$ dimensions   : num [1:19] 1 2 1 2 1 2 1 2 1 2 ... ##   ..$ vars         : num [1:19, 1:2] 1 1 2 3 3 3 4 5 5 5 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : NULL ##   .. .. ..$ : chr [1:2] \"x\" \"y\" ##   ..$ layoutWidth  : num 33 ##   ..$ layoutHeight : num 44 ##   ..$ boundingBoxes: num [1:19, 1:4] 0 0 10 11 11 11 21 22 22 22 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : NULL ##   .. .. ..$ : chr [1:4] \"left\" \"right\" \"bottom\" \"top\" ##  - attr(*, \"class\")= chr [1:3] \"zenGraphics\" \"zenplot\" \"list\" res[[\"path\"]][[\"occupancy\"]] ##      [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] \"\"   \"d\"  \"\"   \"\"   \"\"   \"\"   ## [2,] \"\"   \"r\"  \"r\"  \"d\"  \"\"   \"\"   ## [3,] \"\"   \"\"   \"\"   \"d\"  \"\"   \"\"   ## [4,] \"\"   \"\"   \"\"   \"r\"  \"r\"  \"d\"  ## [5,] \"\"   \"\"   \"\"   \"\"   \"\"   \"d\"  ## [6,] \"l\"  \"l\"  \"\"   \"d\"  \"l\"  \"l\"  ## [7,] \"\"   \"u\"  \"\"   \"d\"  \"\"   \"\"   ## [8,] \"\"   \"u\"  \"l\"  \"l\"  \"\"   \"\" head(res[[\"path\"]][[\"positions\"]]) ##      x y ## [1,] 1 2 ## [2,] 2 2 ## [3,] 2 3 ## [4,] 2 4 ## [5,] 3 4 ## [6,] 4 4"},{"path":"https://great-northern-diver.github.io/zenplots/articles/selected_features.html","id":"tools-for-writing-1d-and-2d-plot-functions","dir":"Articles","previous_headings":"5. Advanced features","what":"5.2 Tools for writing 1d and 2d plot functions","title":"Zigzag expanded navigation plots in R: The R package zenplots","text":"Example structure 2d plot based graphics: setting plot region plots based graphics: Determining indices two variables plotted current 1d 2d plot (1d plots): Basic check return value zenplot() actually return value underlying unfold() (note , output unfold res identical since res specific class attributes):","code":"points_2d_graphics ## function (zargs, cex = 0.4, box = FALSE, add = FALSE, group... = NULL,  ##     plot... = NULL, ...)  ## { ##     r <- extract_2d(zargs) ##     xlim <- r$xlim ##     ylim <- r$ylim ##     x <- as.matrix(r$x) ##     y <- as.matrix(r$y) ##     same.group <- r$same.group ##     if (same.group) { ##         if (!add)  ##             plot_region(xlim = xlim, ylim = ylim, plot... = plot...) ##         points(x = x, y = y, cex = cex, ...) ##         if (box)  ##             box(...) ##     } ##     else { ##         args <- c(list(zargs = zargs, add = add), group...) ##         do.call(group_2d_graphics, args) ##     } ## } ## <bytecode: 0x7fa342de1a70> ## <environment: namespace:zenplots> plot_region ## function (xlim, ylim, plot... = NULL)  ## { ##     if (is.null(plot...)) { ##         plot(NA, xlim = xlim, ylim = ylim, type = \"n\", ann = FALSE,  ##             axes = FALSE, log = \"\") ##     } ##     else { ##         fun <- function(...) plot(NA, xlim = xlim, ylim = ylim,  ##             ...) ##         do.call(fun, plot...) ##     } ## } ## <bytecode: 0x7fa3278f5688> ## <environment: namespace:zenplots> plot_indices ## function (zargs)  ## zargs$vars[zargs$num, ] ## <bytecode: 0x7fa3418cc4a8> ## <environment: namespace:zenplots> n2dcols <- ncol(olive) - 1 # number of faces of the hypercube uf <- unfold(nfaces = n2dcols)  identical(res, uf) #return FALSE ## [1] FALSE for(name in names(uf)) {    stopifnot(identical(res[[name]], uf[[name]])) }"},{"path":"https://great-northern-diver.github.io/zenplots/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marius Hofert. Author. Wayne Oldford. Author, maintainer.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hofert M, Oldford W (2020). “Zigzag Expanded Navigation Plots R: R Package zenplots.” Journal Statistical Software, 95(4), 1–44. doi:10.18637/jss.v095.i04.","code":"@Article{,   title = {Zigzag Expanded Navigation Plots in {R}: The {R} Package {zenplots}},   author = {Marius Hofert and Wayne Oldford},   journal = {Journal of Statistical Software},   year = {2020},   volume = {95},   number = {4},   pages = {1--44},   doi = {10.18637/jss.v095.i04}, }"},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/index.html","id":"plotting-paths-to-data-enlightenment","dir":"","previous_headings":"","what":"Plotting paths to data enlightenment","title":"Zigzag Expanded Navigation Plots","text":"package zenplots (zigzag expanded navigation plots) displays high-dimensional data laying alternating one- two-dimensional plots zigzag-like pattern adjacent axes share variate. Zenplots especially useful subsets pairs can identified particular interest measure, meaningfully comparable, pairs variates can ordered terms potential interest view, number pairs large traditional layouts scatterplot matrix. also allow essentially arbitrary layout plots. High dimensional space can explored zenplot (zenplot()) navigating lower dimensional subspaces along zenpath (zenpath()) orders dimensions (.e. variates) visited according measure interestingness; see Hofert Oldford (2018)) application S&P 500 constituent data Hofert et al (2019) application visualizing dependence two sets variates. See Hofert Oldford (2020) Journal Statistical Software algorithms. R package zenplots provides compact displays high-dimensional data via notion zenplots, grouping variates, customizable displays zigzag layouts. accommodates different graphical systems including base graphics package, grid package (hence packages like ggplot2), interactive graphical package loon. zenplots handles groups variates, partial fully missing data, . One important feature zenplot() auxiliary functions zenplots distinguish layout plotting allows one freely choose create one- two-dimensional plot functions; predefined functions exported graphical systems. Try . Become one data!","code":""},{"path":"https://great-northern-diver.github.io/zenplots/index.html","id":"note","dir":"","previous_headings":"Plotting paths to data enlightenment","what":"Note","title":"Zigzag Expanded Navigation Plots","text":"Since zenplots relies graph package Bioconductor, optionally also Rgraphviz plot graph structures, might simplest install using Bioconductor:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"zenplots\")"},{"path":"https://great-northern-diver.github.io/zenplots/reference/adjust_bb.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliary function for adjusting a bounding box — adjust_bb","title":"Auxiliary function for adjusting a bounding box — adjust_bb","text":"Auxiliary function adjusting bounding box","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/adjust_bb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliary function for adjusting a bounding box — adjust_bb","text":"","code":"adjust_bb(lastturn, coordslastBB, w, h)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/adjust_bb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliary function for adjusting a bounding box — adjust_bb","text":"lastturn last turn coordslastBB coordinates last bounding box w width h height","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/adjust_bb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliary function for adjusting a bounding box — adjust_bb","text":"Coordinates adjusted bounding box","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/adjust_bb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auxiliary function for adjusting a bounding box — adjust_bb","text":"Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrow plot in 1d using R's base graphics — arrow_1d_graphics","title":"Arrow plot in 1d using R's base graphics — arrow_1d_graphics","text":"Arrow plot 1d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrow plot in 1d using R's base graphics — arrow_1d_graphics","text":"","code":"arrow_1d_graphics(   zargs,   loc = c(0.5, 0.5),   angle = 60,   length = 0.6,   add = FALSE,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrow plot in 1d using R's base graphics — arrow_1d_graphics","text":"zargs argument list passed zenplot() loc (x,y)-location [0,1]^2; 0 corresponds left, 1 right (direction path) angle angle [0, 180] length length arrow [0,1] tip base add logical indicating whether plot added last one plot... additional arguments passed plot_region() ... additional arguments passed segments()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrow plot in 1d using R's base graphics — arrow_1d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Arrow plot in 1d using R's base graphics — arrow_1d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrow plot in 1d using the grid package — arrow_1d_grid","title":"Arrow plot in 1d using the grid package — arrow_1d_grid","text":"Arrow plot 1d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrow plot in 1d using the grid package — arrow_1d_grid","text":"","code":"arrow_1d_grid(   zargs,   loc = c(0.5, 0.5),   angle = 60,   length = 0.6,   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrow plot in 1d using the grid package — arrow_1d_grid","text":"zargs argument list passed zenplot() loc (x,y)-location [0,1]^2; 0 corresponds left, 1 right (direction path) angle angle shaft edge arrow head length length arrow [0,1] tip base draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrow plot in 1d using the grid package — arrow_1d_grid","text":"grob (invisibly)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Arrow plot in 1d using the grid package — arrow_1d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrow plot in 1d using the interactive loon package — arrow_1d_loon","title":"Arrow plot in 1d using the interactive loon package — arrow_1d_loon","text":"Arrow plot 1d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrow plot in 1d using the interactive loon package — arrow_1d_loon","text":"","code":"arrow_1d_loon(   zargs,   loc = c(0.5, 0.5),   length = 0.6,   angle = NULL,   linkingGroup = NULL,   showLabels = FALSE,   showScales = FALSE,   showGuides = FALSE,   baseplot = NULL,   parent = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrow plot in 1d using the interactive loon package — arrow_1d_loon","text":"zargs argument list passed zenplot() loc (x,y) location center arrow length length arrow angle angle shaft edge arrow head linkingGroup string specifying initial group plots linked plot showLabels Logical determining whether axis labels displayed showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed baseplot non-null base plot plot layered parent tk parent loon plot widget ... Additional parameters passed loon::l_layer_line(...)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrow plot in 1d using the interactive loon package — arrow_1d_loon","text":"loon loon::l_plot(...)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_1d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Arrow plot in 1d using the interactive loon package — arrow_1d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrow plot in 2d using R's base graphics — arrow_2d_graphics","title":"Arrow plot in 2d using R's base graphics — arrow_2d_graphics","text":"Arrow plot 2d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrow plot in 2d using R's base graphics — arrow_2d_graphics","text":"","code":"arrow_2d_graphics(   zargs,   loc = c(0.5, 0.5),   angle = 60,   length = 0.2,   add = FALSE,   group... = NULL,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrow plot in 2d using R's base graphics — arrow_2d_graphics","text":"zargs argument list passed zenplot() loc (x,y)-location ((0,1)^2) center arrow angle angle shaft edge arrow head length length arrow [0,1] tip base add logical indicating whether plot added last one group... list arguments passed group_2d_graphics (NULL) plot... additional arguments passed plot_region() ... additional arguments passed points()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrow plot in 2d using R's base graphics — arrow_2d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Arrow plot in 2d using R's base graphics — arrow_2d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrow plot in 2d using the grid package — arrow_2d_grid","title":"Arrow plot in 2d using the grid package — arrow_2d_grid","text":"Arrow plot 2d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrow plot in 2d using the grid package — arrow_2d_grid","text":"","code":"arrow_2d_grid(   zargs,   loc = c(0.5, 0.5),   angle = 60,   length = 0.2,   group... = list(cex = 0.66),   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrow plot in 2d using the grid package — arrow_2d_grid","text":"zargs argument list passed zenplot() loc (x,y)-location center arrow angle angle shaft edge arrow head length length arrow [0,1] tip base group... list arguments passed group_2d_grid (NULL) draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrow plot in 2d using the grid package — arrow_2d_grid","text":"grob (invisibly)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Arrow plot in 2d using the grid package — arrow_2d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrow plot in 2d using the interactive loon package — arrow_2d_loon","title":"Arrow plot in 2d using the interactive loon package — arrow_2d_loon","text":"Arrow plot 2d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrow plot in 2d using the interactive loon package — arrow_2d_loon","text":"","code":"arrow_2d_loon(   zargs,   loc = rep(0.5, 2),   length = 0.2,   angle = 30,   linkingGroup = NULL,   color = NULL,   showLabels = FALSE,   showScales = FALSE,   showGuides = FALSE,   baseplot = NULL,   parent = NULL,   group... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrow plot in 2d using the interactive loon package — arrow_2d_loon","text":"zargs argument list passed zenplot() loc (x,y) location center arrow length length arrow angle angle shaft edge arrow head linkingGroup initial linking group color color showLabels Logical determining whether axis labels displayed showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed baseplot non-null base plot plot layered parent tk parent loon plot widget group... list arguments passed group_2d_loon (NULL) ... Additional parameters passed loon::l_layer_line()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrow plot in 2d using the interactive loon package — arrow_2d_loon","text":"plot (invisibly)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/arrow_2d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Arrow plot in 2d using the interactive loon package — arrow_2d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/as_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of columns — as_numeric","title":"A list of columns — as_numeric","text":"list columns","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/as_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of columns — as_numeric","text":"","code":"as_numeric(x)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/as_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A list of columns — as_numeric","text":"x list columns","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/as_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A list of columns — as_numeric","text":"list column converted data (range() works,         can plotted, etc.)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/as_numeric.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"A list of columns — as_numeric","text":"See plot.default -> xy.coords()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/as_numeric.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A list of columns — as_numeric","text":"Marius Hofert","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Axes arrows in 2d using R's base graphics — axes_2d_graphics","title":"Axes arrows in 2d using R's base graphics — axes_2d_graphics","text":"Axes arrows 2d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Axes arrows in 2d using R's base graphics — axes_2d_graphics","text":"","code":"axes_2d_graphics(   zargs,   length = 0.1,   eps = 0.04,   code = 2,   xpd = NA,   add = FALSE,   group... = NULL,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Axes arrows in 2d using R's base graphics — axes_2d_graphics","text":"zargs argument list passed zenplot() length length arrow head eps distance axes moved away plot region code integer code determining kind arrows drawn; see ?arrows xpd logical NA, determining region respect clipping takes place; see ?par add logical indicating whether plot added last one group... list arguments passed group_2d_graphics (NULL) plot... additional arguments passed plot_region() ... additional arguments passed points()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Axes arrows in 2d using R's base graphics — axes_2d_graphics","text":"invisible()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_graphics.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Axes arrows in 2d using R's base graphics — axes_2d_graphics","text":"Inspired https://stat.ethz.ch/pipermail/r-help/2004-October/059525.html","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Axes arrows in 2d using R's base graphics — axes_2d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Axes arrow using the grid package — axes_2d_grid","title":"Axes arrow using the grid package — axes_2d_grid","text":"Axes arrow using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Axes arrow using the grid package — axes_2d_grid","text":"","code":"axes_2d_grid(   zargs,   angle = 30,   length = unit(0.05, \"npc\"),   type = \"open\",   eps = 0.02,   group... = list(cex = 0.66),   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Axes arrow using the grid package — axes_2d_grid","text":"zargs argument list passed zenplot() angle angle arrow head (see ?arrow) length length arrow [0,1] tip base type type arrow head (see ?arrow) eps distance axes moved away plot region group... list arguments passed group_2d_grid (NULL) draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Axes arrow using the grid package — axes_2d_grid","text":"grob (invisibly)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_grid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Axes arrow using the grid package — axes_2d_grid","text":"Inspired https://stat.ethz.ch/pipermail/r-help/2004-October/059525.html","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Axes arrow using the grid package — axes_2d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Axes arrows in 2d using the interactive loon package — axes_2d_loon","title":"Axes arrows in 2d using the interactive loon package — axes_2d_loon","text":"Axes arrows 2d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Axes arrows in 2d using the interactive loon package — axes_2d_loon","text":"","code":"axes_2d_loon(   zargs,   angle = 30,   length = 0.05,   eps = 0.02,   linkingGroup = NULL,   color = NULL,   showLabels = FALSE,   showScales = FALSE,   showGuides = FALSE,   baseplot = NULL,   parent = NULL,   group... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Axes arrows in 2d using the interactive loon package — axes_2d_loon","text":"zargs argument list passed zenplot() angle angle arrow head length length arrow head eps distance axes moved away plot region linkingGroup initial linking group color Colour used fill ccol NULL, grey palette used otherwise. showLabels Logical determining whether axis labels displayed showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed baseplot non-null base plot plot layered parent tk parent loon plot widget group... list arguments passed group_2d_loon (NULL) ... Additional arguments passed loon::l_plot()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Axes arrows in 2d using the interactive loon package — axes_2d_loon","text":"loon plot","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_loon.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Axes arrows in 2d using the interactive loon package — axes_2d_loon","text":"Inspired https://stat.ethz.ch/pipermail/r-help/2004-October/059525.html","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/axes_2d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Axes arrows in 2d using the interactive loon package — axes_2d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Box plot in 1d using R's base graphics — boxplot_1d_graphics","title":"Box plot in 1d using R's base graphics — boxplot_1d_graphics","text":"Box plot 1d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Box plot in 1d using R's base graphics — boxplot_1d_graphics","text":"","code":"boxplot_1d_graphics(   zargs,   cex = 0.4,   range = NULL,   axes = FALSE,   add = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Box plot in 1d using R's base graphics — boxplot_1d_graphics","text":"zargs argument list passed zenplot() cex character expansion factor range numerical value determines far plot whiskers extend. NULL, whiskers (range) grows sample size. axes logicial indicating whether axes drawn add logical indicating whether plot added last one ... Additional arguments passed boxplot()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Box plot in 1d using R's base graphics — boxplot_1d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Box plot in 1d using R's base graphics — boxplot_1d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Boxplot in 1d using the grid package — boxplot_1d_grid","title":"Boxplot in 1d using the grid package — boxplot_1d_grid","text":"Boxplot 1d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boxplot in 1d using the grid package — boxplot_1d_grid","text":"","code":"boxplot_1d_grid(   zargs,   pch = 21,   size = 0.02,   col = NULL,   lwd = 2,   bpwidth = 0.5,   range = NULL,   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boxplot in 1d using the grid package — boxplot_1d_grid","text":"zargs argument list passed zenplot() pch plot symbol size size plot symbol col color lwd graphical parameter line width whiskers median bpwidth width boxplot scale default.units range numerical value used determine far plot whiskers extend. NULL, whiskers (range) grows sample size. draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boxplot in 1d using the grid package — boxplot_1d_grid","text":"gTree grob containing boxplot components grobs","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boxplot in 1d using the grid package — boxplot_1d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Boxplot in 1d using the interactive loon package — boxplot_1d_loon","title":"Boxplot in 1d using the interactive loon package — boxplot_1d_loon","text":"Boxplot 1d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boxplot in 1d using the interactive loon package — boxplot_1d_loon","text":"","code":"boxplot_1d_loon(   zargs,   color = NULL,   linecolor = NULL,   lwd = 2,   range = NULL,   showLabels = FALSE,   showScales = FALSE,   showGuides = FALSE,   linkingGroup = NULL,   baseplot = NULL,   parent,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boxplot in 1d using the interactive loon package — boxplot_1d_loon","text":"zargs argument list passed zenplot() color colour boxplot linecolor Colour used lines draw boxplot lwd parameter line width whiskers median box boundaries range numerical value used determine far plot whiskers extend. NULL, whiskers (range) grows sample size. showLabels Logical determining whether axis labels displayed showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed linkingGroup string specifying initial group plots linked plot baseplot non-null base plot plot layered parent tk parent loon plot widget ... Additional parameters passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boxplot in 1d using the interactive loon package — boxplot_1d_loon","text":"loon loon::l_plot(...)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/boxplot_1d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boxplot in 1d using the interactive loon package — boxplot_1d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/burst.html","id":null,"dir":"Reference","previous_headings":"","what":"Splitting an Input Object into a List of Columns — burst","title":"Splitting an Input Object into a List of Columns — burst","text":"Splits (numeric/logical/character) vector, matrix, data.frame list list columns, corresponding group variable information well labels. auxiliary function checking converting data argument zenplot().","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/burst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splitting an Input Object into a List of Columns — burst","text":"","code":"burst(x, labs = list())"},{"path":"https://great-northern-diver.github.io/zenplots/reference/burst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splitting an Input Object into a List of Columns — burst","text":"x numeric vector, matrix, data.frame , burst(), list . labs Either NULL (case neither group variable labels used computed) list components group - group label basename labels groups                      (NULL group labels) var - variable label basename labels variables        (NULL variable labels) sep - string used separator group        variable labels group2d - logical indicating whether labels        group_2d_*() plots affected group = NULL (printed anyway) components given, set defaults described zenplot(). Note least one (group variable) label given x, (original) labels used. labs = NULL, neither group variable labels used.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/burst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splitting an Input Object into a List of Columns — burst","text":"list components xcols - list containing column vectors  x groups - group number column  x vars - variable number (within group) column  x glabs - group label column  x labs - group variable labels column  x","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/burst.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Splitting an Input Object into a List of Columns — burst","text":"Performance critical","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/burst.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Splitting an Input Object into a List of Columns — burst","text":"Marius Hofert","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/burst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Splitting an Input Object into a List of Columns — burst","text":"","code":"## Unnamed list of (some named, some unnamed) valid components A <- matrix(1:12, ncol = 3) x <- list(A, 1:4, as.data.frame(A))  burst(x, labs = list(group = \"G\", var = \"V\", sep = \", \")) #> $xcols #> $xcols$`G1, V1` #> [1] 1 2 3 4 #>  #> $xcols$`G1, V2` #> [1] 5 6 7 8 #>  #> $xcols$`G1, V3` #> [1]  9 10 11 12 #>  #> $xcols$`G2, V1` #> [1] 1 2 3 4 #>  #> $xcols$`G3, V1` #> [1] 1 2 3 4 #>  #> $xcols$`G3, V2` #> [1] 5 6 7 8 #>  #> $xcols$`G3, V3` #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> [1] \"G1\" \"G1\" \"G1\" \"G2\" \"G3\" \"G3\" \"G3\" #>  #> $vlabs #> [1] \"V1\" \"V2\" \"V3\" \"V1\" \"V1\" \"V2\" \"V3\" #>  burst(x) # the same defaults as above #> $xcols #> $xcols$`G1, V1` #> [1] 1 2 3 4 #>  #> $xcols$`G1, V2` #> [1] 5 6 7 8 #>  #> $xcols$`G1, V3` #> [1]  9 10 11 12 #>  #> $xcols$`G2, V1` #> [1] 1 2 3 4 #>  #> $xcols$`G3, V1` #> [1] 1 2 3 4 #>  #> $xcols$`G3, V2` #> [1] 5 6 7 8 #>  #> $xcols$`G3, V3` #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> [1] \"G1\" \"G1\" \"G1\" \"G2\" \"G3\" \"G3\" \"G3\" #>  #> $vlabs #> [1] \"V1\" \"V2\" \"V3\" \"V1\" \"V1\" \"V2\" \"V3\" #>  burst(x, labs = list(sep = \" \")) # only changing the separator #> $xcols #> $xcols$`G1 V1` #> [1] 1 2 3 4 #>  #> $xcols$`G1 V2` #> [1] 5 6 7 8 #>  #> $xcols$`G1 V3` #> [1]  9 10 11 12 #>  #> $xcols$`G2 V1` #> [1] 1 2 3 4 #>  #> $xcols$`G3 V1` #> [1] 1 2 3 4 #>  #> $xcols$`G3 V2` #> [1] 5 6 7 8 #>  #> $xcols$`G3 V3` #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> [1] \"G1\" \"G1\" \"G1\" \"G2\" \"G3\" \"G3\" \"G3\" #>  #> $vlabs #> [1] \"V1\" \"V2\" \"V3\" \"V1\" \"V1\" \"V2\" \"V3\" #>  ## Note: - No group labels are given in 'x' and thus they are constructed ##         in the above call ##        - The variable names are only constructed if not given  burst(x, labs = list(group = \"\")) #> $xcols #> $xcols$`1, V1` #> [1] 1 2 3 4 #>  #> $xcols$`1, V2` #> [1] 5 6 7 8 #>  #> $xcols$`1, V3` #> [1]  9 10 11 12 #>  #> $xcols$`2, V1` #> [1] 1 2 3 4 #>  #> $xcols$`3, V1` #> [1] 1 2 3 4 #>  #> $xcols$`3, V2` #> [1] 5 6 7 8 #>  #> $xcols$`3, V3` #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> [1] \"1\" \"1\" \"1\" \"2\" \"3\" \"3\" \"3\" #>  #> $vlabs #> [1] \"V1\" \"V2\" \"V3\" \"V1\" \"V1\" \"V2\" \"V3\" #>  burst(x, labs = list(group = NULL, group2d = TRUE)) # no group labels #> $xcols #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V2 #> [1] 5 6 7 8 #>  #> $xcols$V3 #> [1]  9 10 11 12 #>  #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V2 #> [1] 5 6 7 8 #>  #> $xcols$V3 #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" #>  #> $vlabs #> [1] \"V1\" \"V2\" \"V3\" \"V1\" \"V1\" \"V2\" \"V3\" #>  ##  Note: There's no effect of 'group2d = TRUE' visible here as ##        'x' doesn't contain group labels  burst(x, labs = list(group = NULL)) # no group labels unless groups change #> $xcols #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V2 #> [1] 5 6 7 8 #>  #> $xcols$V3 #> [1]  9 10 11 12 #>  #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V2 #> [1] 5 6 7 8 #>  #> $xcols$V3 #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> NULL #>  #> $vlabs #> [1] \"V1\" \"V2\" \"V3\" \"V1\" \"V1\" \"V2\" \"V3\" #>  burst(x, labs = list(var = NULL)) # no variable labels #> $xcols #> $xcols$G1 #> [1] 1 2 3 4 #>  #> $xcols$G1 #> [1] 5 6 7 8 #>  #> $xcols$G1 #> [1]  9 10 11 12 #>  #> $xcols$G2 #> [1] 1 2 3 4 #>  #> $xcols$G3 #> [1] 1 2 3 4 #>  #> $xcols$G3 #> [1] 5 6 7 8 #>  #> $xcols$G3 #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> [1] \"G1\" \"G1\" \"G1\" \"G2\" \"G3\" \"G3\" \"G3\" #>  #> $vlabs #> [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" #>  burst(x, labs = list(group = NULL, var = NULL)) # neither one #> $xcols #> $xcols[[1]] #> [1] 1 2 3 4 #>  #> $xcols[[2]] #> [1] 5 6 7 8 #>  #> $xcols[[3]] #> [1]  9 10 11 12 #>  #> $xcols[[4]] #> [1] 1 2 3 4 #>  #> $xcols[[5]] #> [1] 1 2 3 4 #>  #> $xcols[[6]] #> [1] 5 6 7 8 #>  #> $xcols[[7]] #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> NULL #>  #> $vlabs #> [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" #>  burst(x, labs = NULL) # similarly, without any labels at all #> $xcols #> $xcols[[1]] #> [1] 1 2 3 4 #>  #> $xcols[[2]] #> [1] 5 6 7 8 #>  #> $xcols[[3]] #> [1]  9 10 11 12 #>  #> $xcols[[4]] #> [1] 1 2 3 4 #>  #> $xcols[[5]] #> [1] 1 2 3 4 #>  #> $xcols[[6]] #> [1] 5 6 7 8 #>  #> $xcols[[7]] #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> NULL #>  #> $vlabs #> NULL #>   ##  Named list x <- list(mat = A, vec = 1:4, df = as.data.frame(A)) burst(x) #> $xcols #> $xcols$`mat, V1` #> [1] 1 2 3 4 #>  #> $xcols$`mat, V2` #> [1] 5 6 7 8 #>  #> $xcols$`mat, V3` #> [1]  9 10 11 12 #>  #> $xcols$`vec, V1` #> [1] 1 2 3 4 #>  #> $xcols$`df, V1` #> [1] 1 2 3 4 #>  #> $xcols$`df, V2` #> [1] 5 6 7 8 #>  #> $xcols$`df, V3` #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> [1] \"mat\" \"mat\" \"mat\" \"vec\" \"df\"  \"df\"  \"df\"  #>  #> $vlabs #> [1] \"V1\" \"V2\" \"V3\" \"V1\" \"V1\" \"V2\" \"V3\" #>  ##  Note: - The given group labels are used ##        - The variable names are only constructed if not given  burst(x, labs = list(group = NULL, group2d = TRUE)) # no group labels #> $xcols #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V2 #> [1] 5 6 7 8 #>  #> $xcols$V3 #> [1]  9 10 11 12 #>  #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V2 #> [1] 5 6 7 8 #>  #> $xcols$V3 #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" #>  #> $vlabs #> [1] \"V1\" \"V2\" \"V3\" \"V1\" \"V1\" \"V2\" \"V3\" #>  burst(x, labs = list(group = NULL)) # no group labels unless groups change #> $xcols #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V2 #> [1] 5 6 7 8 #>  #> $xcols$V3 #> [1]  9 10 11 12 #>  #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V2 #> [1] 5 6 7 8 #>  #> $xcols$V3 #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> [1] \"mat\" \"mat\" \"mat\" \"vec\" \"df\"  \"df\"  \"df\"  #>  #> $vlabs #> [1] \"V1\" \"V2\" \"V3\" \"V1\" \"V1\" \"V2\" \"V3\" #>  ##  Note: Now the effect of 'group2d' is visible.  ##  Partially named list x <- list(mat = A, vec = 1:4, as.data.frame(A)) burst(x) #> $xcols #> $xcols$`mat, V1` #> [1] 1 2 3 4 #>  #> $xcols$`mat, V2` #> [1] 5 6 7 8 #>  #> $xcols$`mat, V3` #> [1]  9 10 11 12 #>  #> $xcols$`vec, V1` #> [1] 1 2 3 4 #>  #> $xcols$`, V1` #> [1] 1 2 3 4 #>  #> $xcols$`, V2` #> [1] 5 6 7 8 #>  #> $xcols$`, V3` #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> [1] \"mat\" \"mat\" \"mat\" \"vec\" \"\"    \"\"    \"\"    #>  #> $vlabs #> [1] \"V1\" \"V2\" \"V3\" \"V1\" \"V1\" \"V2\" \"V3\" #>  burst(x, labs = list(group = NULL, group2d = TRUE)) # no group labels #> $xcols #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V2 #> [1] 5 6 7 8 #>  #> $xcols$V3 #> [1]  9 10 11 12 #>  #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V2 #> [1] 5 6 7 8 #>  #> $xcols$V3 #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" #>  #> $vlabs #> [1] \"V1\" \"V2\" \"V3\" \"V1\" \"V1\" \"V2\" \"V3\" #>  burst(x, labs = list(group = NULL)) # no group labels unless groups change #> $xcols #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V2 #> [1] 5 6 7 8 #>  #> $xcols$V3 #> [1]  9 10 11 12 #>  #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V1 #> [1] 1 2 3 4 #>  #> $xcols$V2 #> [1] 5 6 7 8 #>  #> $xcols$V3 #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> [1] \"mat\" \"mat\" \"mat\" \"vec\" \"\"    \"\"    \"\"    #>  #> $vlabs #> [1] \"V1\" \"V2\" \"V3\" \"V1\" \"V1\" \"V2\" \"V3\" #>  burst(x, labs = list(var = NULL)) # no variable labels #> $xcols #> $xcols$mat #> [1] 1 2 3 4 #>  #> $xcols$mat #> [1] 5 6 7 8 #>  #> $xcols$mat #> [1]  9 10 11 12 #>  #> $xcols$vec #> [1] 1 2 3 4 #>  #> $xcols[[5]] #> [1] 1 2 3 4 #>  #> $xcols[[6]] #> [1] 5 6 7 8 #>  #> $xcols[[7]] #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> [1] \"mat\" \"mat\" \"mat\" \"vec\" \"\"    \"\"    \"\"    #>  #> $vlabs #> [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" #>  burst(x, labs = list(group = NULL, var = NULL)) # only group labels and only if groups change #> $xcols #> $xcols[[1]] #> [1] 1 2 3 4 #>  #> $xcols[[2]] #> [1] 5 6 7 8 #>  #> $xcols[[3]] #> [1]  9 10 11 12 #>  #> $xcols[[4]] #> [1] 1 2 3 4 #>  #> $xcols[[5]] #> [1] 1 2 3 4 #>  #> $xcols[[6]] #> [1] 5 6 7 8 #>  #> $xcols[[7]] #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> [1] \"mat\" \"mat\" \"mat\" \"vec\" \"\"    \"\"    \"\"    #>  #> $vlabs #> [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" #>  burst(x, labs = NULL) # neither group nor variable labels #> $xcols #> $xcols[[1]] #> [1] 1 2 3 4 #>  #> $xcols[[2]] #> [1] 5 6 7 8 #>  #> $xcols[[3]] #> [1]  9 10 11 12 #>  #> $xcols[[4]] #> [1] 1 2 3 4 #>  #> $xcols[[5]] #> [1] 1 2 3 4 #>  #> $xcols[[6]] #> [1] 5 6 7 8 #>  #> $xcols[[7]] #> [1]  9 10 11 12 #>  #>  #> $groups #> [1] 1 1 1 2 3 3 3 #>  #> $vars #> [1] 1 2 3 1 1 2 3 #>  #> $glabs #> NULL #>  #> $vlabs #> NULL #>"},{"path":"https://great-northern-diver.github.io/zenplots/reference/burst_aux.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliary function for burst() — burst_aux","title":"Auxiliary function for burst() — burst_aux","text":"Auxiliary function burst()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/burst_aux.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliary function for burst() — burst_aux","text":"","code":"burst_aux(x, labs = \"V\")"},{"path":"https://great-northern-diver.github.io/zenplots/reference/burst_aux.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliary function for burst() — burst_aux","text":"x vector, matrix data.frame ((pure) list, use ) labs variable labels: - NULL, labels used - length 1, use label append 1:ncol(x)   x column names (otherwise use latter) - length ncol(x), use   x column names (otherwise use latter)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/burst_aux.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliary function for burst() — burst_aux","text":"'x' list named columns","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/burst_aux.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Auxiliary function for burst() — burst_aux","text":"- Performance critical (checks )       - Data frames always default names. possibly         ugly use         determine whether assigned automatically         purpose.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/burst_aux.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auxiliary function for burst() — burst_aux","text":"Marius Hofert","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/check_zargs.html","id":null,"dir":"Reference","previous_headings":"","what":"Checking whether certain arguments appear in zargs — check_zargs","title":"Checking whether certain arguments appear in zargs — check_zargs","text":"Checking whether certain arguments appear zargs","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/check_zargs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checking whether certain arguments appear in zargs — check_zargs","text":"","code":"check_zargs(zargs, ...)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/check_zargs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checking whether certain arguments appear in zargs — check_zargs","text":"zargs argument list passed zenplot() ... arguments checked presence zargs","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/check_zargs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checking whether certain arguments appear in zargs — check_zargs","text":"logical indicating whether arguments missing zargs","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/check_zargs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Checking whether certain arguments appear in zargs — check_zargs","text":"Marius Hofert","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/connect_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Connecting Possibly Overlapping Pairs Into a List of Paths — connect_pairs","title":"Connecting Possibly Overlapping Pairs Into a List of Paths — connect_pairs","text":"Pairs, given rows matrix, data.frame, list, processed return list paths, identifying connected pairs rows x.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/connect_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connecting Possibly Overlapping Pairs Into a List of Paths — connect_pairs","text":"","code":"connect_pairs(x, duplicate.rm = FALSE)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/connect_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connecting Possibly Overlapping Pairs Into a List of Paths — connect_pairs","text":"x two-column matrix, data.frame, list containing vectors length two representing pairs connected. duplicate.rm logical indicating whether equal pairs (permutation) omitted.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/connect_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connecting Possibly Overlapping Pairs Into a List of Paths — connect_pairs","text":"list whose elements give path connected pairs. list element vector length least 2 (longer vectors > 2 length identify pairs connected path).","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/connect_pairs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Connecting Possibly Overlapping Pairs Into a List of Paths — connect_pairs","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/connect_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connecting Possibly Overlapping Pairs Into a List of Paths — connect_pairs","text":"","code":"## First something simple. (pairs <- matrix(c(1,2,2,3,3,5,5,7,8,9), ncol = 2, byrow = TRUE)) #>      [,1] [,2] #> [1,]    1    2 #> [2,]    2    3 #> [3,]    3    5 #> [4,]    5    7 #> [5,]    8    9 ## Connect pairs into separate paths defined by the row order. connect_pairs(pairs) #> [[1]] #> [1] 1 2 3 5 7 #>  #> [[2]] #> [1] 8 9 #>   ## Now something different nVars <- 5 pairs <- expand.grid(1:nVars, 1:nVars) ## and take those where (pairs <- pairs[pairs[,1] < pairs[,2],]) #>    Var1 Var2 #> 6     1    2 #> 11    1    3 #> 12    2    3 #> 16    1    4 #> 17    2    4 #> 18    3    4 #> 21    1    5 #> 22    2    5 #> 23    3    5 #> 24    4    5 connect_pairs(pairs) #> [[1]] #> [1] 2 1 3 2 #>  #> [[2]] #> [1] 1 4 2 #>  #> [[3]] #> [1] 3 4 #>  #> [[4]] #> [1] 1 5 2 #>  #> [[5]] #> [1] 3 5 4 #>   ## Something more complicated. ## Get weights set.seed(27135) x <- runif(choose(nVars,2)) # weights  ## We imagine pairs identify edges of a graph with these weights ## Get a zenpath ordering the edges based on weights (zp <- zenpath(x, pairs = pairs, method = \"strictly.weighted\")) #> [[1]] #> [1] 2 3 #>  #> [[2]] #> [1] 3 5 #>  #> [[3]] #> [1] 2 5 #>  #> [[4]] #> [1] 3 4 #>  #> [[5]] #> [1] 4 5 #>  #> [[6]] #> [1] 1 5 #>  #> [[7]] #> [1] 2 4 #>  #> [[8]] #> [1] 1 2 #>  #> [[9]] #> [1] 1 3 #>  #> [[10]] #> [1] 1 4 #>   ## And connect these giving the list of paths connect_pairs(zp) #> [[1]] #> [1] 2 3 5 2 #>  #> [[2]] #> [1] 3 4 5 1 #>  #> [[3]] #> [1] 4 2 1 3 #>  #> [[4]] #> [1] 1 4 #>"},{"path":"https://great-northern-diver.github.io/zenplots/reference/convert_occupancy.html","id":null,"dir":"Reference","previous_headings":"","what":"Converting an Occupancy Matrix — convert_occupancy","title":"Converting an Occupancy Matrix — convert_occupancy","text":"Convert occupancy matrix matrix different symbols.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/convert_occupancy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converting an Occupancy Matrix — convert_occupancy","text":"","code":"convert_occupancy(x, to = c(\"\", \"<\", \">\", \"v\", \"^\"))"},{"path":"https://great-northern-diver.github.io/zenplots/reference/convert_occupancy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converting an Occupancy Matrix — convert_occupancy","text":"x occupancy matrix consisting character \"\" (unoccupied), \"l\" (left), \"r\" (right), \"d\" () \"u\" () returned zenplot(). vector symbols \"\", \"l\", \"r\", \"d\" \"u\" mapped.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/convert_occupancy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converting an Occupancy Matrix — convert_occupancy","text":"matrix occupancy matrix entries replaced        .","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/convert_occupancy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converting an Occupancy Matrix — convert_occupancy","text":"Marius Hofert","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/convert_occupancy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converting an Occupancy Matrix — convert_occupancy","text":"","code":"## Generate some data n <- 1000 # sample size d <- 20 # dimension set.seed(271) # set seed (for reproducibility) x <- matrix(rnorm(n * d), ncol = d) # i.i.d. N(0,1) data  ## Extract the occupancy matrix from a zenplot res <- zenplot(x)  (occ <- res[[\"path\"]][[\"occupancy\"]]) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #>  [1,] \"d\"  \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   #>  [2,] \"r\"  \"r\"  \"d\"  \"\"   \"r\"  \"r\"  \"d\"  \"\"   \"\"   #>  [3,] \"\"   \"\"   \"d\"  \"\"   \"u\"  \"\"   \"d\"  \"\"   \"\"   #>  [4,] \"\"   \"\"   \"r\"  \"r\"  \"u\"  \"\"   \"r\"  \"r\"  \"d\"  #>  [5,] \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   \"d\"  #>  [6,] \"\"   \"\"   \"d\"  \"l\"  \"l\"  \"\"   \"d\"  \"l\"  \"l\"  #>  [7,] \"\"   \"\"   \"d\"  \"\"   \"u\"  \"\"   \"d\"  \"\"   \"\"   #>  [8,] \"d\"  \"l\"  \"l\"  \"\"   \"u\"  \"l\"  \"l\"  \"\"   \"\"   #>  [9,] \"d\"  \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   #> [10,] \"r\"  \"r\"  \"d\"  \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   #> [11,] \"\"   \"\"   \"d\"  \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   #> [12,] \"\"   \"\"   \"r\"  \"r\"  \"\"   \"\"   \"\"   \"\"   \"\"    ## Convert the occupancy matrix convert_occupancy(occ) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #>  [1,] \"v\"  \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   #>  [2,] \">\"  \">\"  \"v\"  \"\"   \">\"  \">\"  \"v\"  \"\"   \"\"   #>  [3,] \"\"   \"\"   \"v\"  \"\"   \"^\"  \"\"   \"v\"  \"\"   \"\"   #>  [4,] \"\"   \"\"   \">\"  \">\"  \"^\"  \"\"   \">\"  \">\"  \"v\"  #>  [5,] \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   \"v\"  #>  [6,] \"\"   \"\"   \"v\"  \"<\"  \"<\"  \"\"   \"v\"  \"<\"  \"<\"  #>  [7,] \"\"   \"\"   \"v\"  \"\"   \"^\"  \"\"   \"v\"  \"\"   \"\"   #>  [8,] \"v\"  \"<\"  \"<\"  \"\"   \"^\"  \"<\"  \"<\"  \"\"   \"\"   #>  [9,] \"v\"  \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   #> [10,] \">\"  \">\"  \"v\"  \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   #> [11,] \"\"   \"\"   \"v\"  \"\"   \"\"   \"\"   \"\"   \"\"   \"\"   #> [12,] \"\"   \"\"   \">\"  \">\"  \"\"   \"\"   \"\"   \"\"   \"\""},{"path":"https://great-northern-diver.github.io/zenplots/reference/de_elect.html","id":null,"dir":"Reference","previous_headings":"","what":"German Election Data from 2002 and 2005 — de_elect","title":"German Election Data from 2002 and 2005 — de_elect","text":"Data set consisting 68 columns data German elections   2002 2005.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/de_elect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"German Election Data from 2002 and 2005 — de_elect","text":"","code":"data(\"de_elect\")"},{"path":"https://great-northern-diver.github.io/zenplots/reference/de_elect.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"German Election Data from 2002 and 2005 — de_elect","text":"data.frame() 68 columns: District: electoral district State: federal state (Bundesland) Num.comm: number communities Area: area 2004-12-31 (square km) Pop: population 2004-12-31 (1000) Men: men (1000) Citizens: germans (1000) Density: population density 2004-12-31 (square km) Pop.le.15: population younger (equal ) 15 years       2002-12-31 (percent) Pop.15.18: population 15 18 years old       2002-12-31 (percent) Pop.18.25: population 18 25 years old       2002-12-31 (percent) Pop.25.35: population 25 35 years old       2002-12-31 (percent) Pop.35.60: population 35 60 years old       2002-12-31 (percent) Pop.g.60: population older 60 years       2002-12-31 (percent) Births: live births (per 1000) Deaths: deaths (per 1000) Move.: moving 2003 (per 1000) Move.: moving away 2003 (per 1000) Increase: increase population (per 1000) Farms: number farms 2001 (per 1000) Agriculture: agriculturally used land (ha) Mining: mining companies processing trade 2002-09-30 (per 1000) Mining.employees: employees mining processing trade 2002-09-30 (per 1000) Apt.new: new apartments 2002 (per 1000) Apt: apartments 2002-12-31 (per 1000) Motorized: motor vehicles 2003-01-31 (per 1000) School.finishers: school finishers 2002 (per 1000) School.wo.2nd: without secondary school (ohne       Hauptschule) 2002 (percent) School.2nd: secondary school (Hauptschule) 2002 (percent) School.Real: graduation Realschule 2002 (percent) School.UED: university-entrance diploma       (Gymnasium) 2002 (percent) Unemployment.03: unemployment 2003-12-31 (percent) Unemployment.04: unemployment 2004-12-31 (percent) Employed: employed subject social insurance contribution (per 1000) FFF: farmers, foresters, fishermen (percent) Industry: industry employees subject social insurance       contribution (percent) CTT: commerce, transportation telecommunication employees       subject social insurance contribution (percent) OS: services (percent) Voters.05: eligible voters 2005 Voters.02: eligible voters 2002 Votes.05: number votes 2005 Votes.02: number votes 2002 Invalid.05: invalid votes 2005 Invalid.02: invalid votes 2002 Valid.05: valid votes 2005 Valid.02: valid votes 2002 Votes.SPD.05: votes SPD 2005 Votes.SPD.02: votes SPD 2002 Votes.CDU.CSU.05: votes CDU/CSU 2005 Votes.CDU.CSU.02: votes CDU/CSU 2002 Votes.Gruene.05: votes Gruene 2005 Votes.Gruene.02: votes Gruene 2002 Votes.FDP.05: votes FDP 2005 Votes.FDP.02: votes FDP 2002 Votes.Linke.05: votes Linke 2005 Votes.Linke.02: votes Linke 2002 SPD.05: SPD 2005 (fraction [0,1]) CDU.CSU.05: CDU/CSU 2005 (fraction [0,1]) Gruene.05: Gruene 2005 (fraction [0,1]) FDP.05: FDP 2005 (fraction [0,1]) Linke.05: Linke 2005 (fraction [0,1]) Others.05: parties 2005 (fraction [0,1]) SPD.02: SPD 2002 (fraction [0,1]) CDU.CSU.02: CDU/CSU 2002 (fraction [0,1]) Gruene.02: Gruene 2002 (fraction [0,1]) FDP.02: FDP 2002 (fraction [0,1]) Linke.02: Linke 2002 (fraction [0,1]) Others.02: parties 2002 (fraction [0,1])","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/de_elect.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"German Election Data from 2002 and 2005 — de_elect","text":"data obtained http://www.bundeswahlleiter.de   available link anymore. Furthermore, first column   original data set ommitted contained row numbers.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/de_elect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"German Election Data from 2002 and 2005 — de_elect","text":"","code":"data(\"de_elect\")"},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Density plot in 1d using R's base graphics — density_1d_graphics","title":"Density plot in 1d using R's base graphics — density_1d_graphics","text":"Density plot 1d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density plot in 1d using R's base graphics — density_1d_graphics","text":"","code":"density_1d_graphics(   zargs,   density... = NULL,   offset = 0.08,   add = FALSE,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density plot in 1d using R's base graphics — density_1d_graphics","text":"zargs argument list passed zenplot() density... list arguments density() offset number [0, 0.5] determining far away density stays plot margins (creating space two) add logical indicating whether plot added last one plot... additional arguments passed plot_region() ... additional arguments passed polygon()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density plot in 1d using R's base graphics — density_1d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Density plot in 1d using R's base graphics — density_1d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Density plot in 1d using the grid package — density_1d_grid","title":"Density plot in 1d using the grid package — density_1d_grid","text":"Density plot 1d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density plot in 1d using the grid package — density_1d_grid","text":"","code":"density_1d_grid(zargs, density... = NULL, offset = 0.08, draw = FALSE, ...)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density plot in 1d using the grid package — density_1d_grid","text":"zargs argument list passed zenplot() density... list arguments density() offset numerical value $$[0, 0.5]$$ used offset density within height 1 box appears draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density plot in 1d using the grid package — density_1d_grid","text":"grob (invisibly)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Density plot in 1d using the grid package — density_1d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Density plot in 1d using the interactive loon package — density_1d_loon","title":"Density plot in 1d using the interactive loon package — density_1d_loon","text":"Density plot 1d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density plot in 1d using the interactive loon package — density_1d_loon","text":"","code":"density_1d_loon(   zargs,   density.args = list(),   method = c(\"single\", \"double\"),   lwd = NULL,   linewidth = NULL,   color = NULL,   fill = NULL,   linecolor = NULL,   linkingGroup = NULL,   showLabels = FALSE,   showScales = FALSE,   showGuides = FALSE,   baseplot = NULL,   parent = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density plot in 1d using the interactive loon package — density_1d_loon","text":"zargs argument list passed zenplot() density.args list arguments density() method character specifying type density used lwd Line width  used linewidth = NULL, value 1 used otherwise. linewidth Line width outline density polygons (highest priority) color Colour used fill density fill NULL outline density linecolor NULL, foreground colour used otherwise. fill Colour used fill density polygon linecolor Colour used outline density linkingGroup string specifying initial group plots linked plot showLabels Logical determining whether axis labels displayed showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed baseplot non-null base plot plot layered parent tk parent loon plot widget ... Additional parameters passed loon::l_layer()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density plot in 1d using the interactive loon package — density_1d_loon","text":"loon loon::l_plot(...)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_1d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Density plot in 1d using the interactive loon package — density_1d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Density plot in 2d using R's base graphics — density_2d_graphics","title":"Density plot in 2d using R's base graphics — density_2d_graphics","text":"Density plot 2d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density plot in 2d using R's base graphics — density_2d_graphics","text":"","code":"density_2d_graphics(   zargs,   ngrids = 25,   drawlabels = FALSE,   axes = FALSE,   box = FALSE,   add = FALSE,   group... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density plot in 2d using R's base graphics — density_2d_graphics","text":"zargs argument list passed zenplot() ngrids number grid points dimension. Can scalar length-2 integer vector. drawlabels logical indicating whether contours labelled axes logicial indicating whether axes drawn box logical indicating whether box drawn add logical indicating whether plot added last one group... list arguments passed group_2d_graphics (NULL) ... additional arguments passed points()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density plot in 2d using R's base graphics — density_2d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Density plot in 2d using R's base graphics — density_2d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Density plot in 2d using the grid package — density_2d_grid","title":"Density plot in 2d using the grid package — density_2d_grid","text":"Density plot 2d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density plot in 2d using the grid package — density_2d_grid","text":"","code":"density_2d_grid(   zargs,   ngrids = 25,   ccol = NULL,   clwd = 1,   clty = 1,   box = FALSE,   box.width = 1,   box.height = 1,   group... = list(cex = 0.66),   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density plot in 2d using the grid package — density_2d_grid","text":"zargs argument list passed zenplot() ngrids number grid points direction. Can scalar length-2 integer vector. ccol vector (recycled appropriate length) giving color contours clwd vector (recycled appropriate length) giving line widths contours clty vector (recycled appropriate length) giving line types contours box logical indicating whether box drawn box.width width box box.height height box group... list arguments passed group_2d_grid (NULL) draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density plot in 2d using the grid package — density_2d_grid","text":"grob (invisibly)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_grid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Density plot in 2d using the grid package — density_2d_grid","text":"- use names depending 'type' since otherwise, one calls         'p' 'l', one plotted       - default point size chosen match default graphics","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Density plot in 2d using the grid package — density_2d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Density plot in 2d using the interactive loon package — density_2d_loon","title":"Density plot in 2d using the interactive loon package — density_2d_loon","text":"Density plot 2d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density plot in 2d using the interactive loon package — density_2d_loon","text":"","code":"density_2d_loon(   zargs,   ngrids = 25,   ccol = NULL,   color = NULL,   clwd = NULL,   lwd = NULL,   linewidth = 1,   showLabels = FALSE,   showScales = FALSE,   showGuides = FALSE,   linkingGroup = NULL,   baseplot = NULL,   parent = NULL,   group... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density plot in 2d using the interactive loon package — density_2d_loon","text":"zargs argument list passed zenplot() ngrids Number grid points direction. Can scalar length-2 integer vector. ccol vector (recycled appropriate length) giving color contours color Colour used fill ccol NULL, grey palette used otherwise. clwd vector (recycled appropriate length) giving line widths contours lwd Line width used clwd = NULL linewidth Line width used  clwd lwd NULL, value 1 used otherwise. showLabels Logical determining whether axis labels displayed showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed linkingGroup initial linking group baseplot non-null base plot plot layered parent tk parent loon plot widget group... list arguments passed group_2d_loon (NULL) ... Additional parameters passed loon::l_layer_line()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density plot in 2d using the interactive loon package — density_2d_loon","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/density_2d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Density plot in 2d using the interactive loon package — density_2d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting information for our default/provided plot1d() — extract_1d","title":"Extracting information for our default/provided plot1d() — extract_1d","text":"Extracting information default/provided plot1d()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting information for our default/provided plot1d() — extract_1d","text":"","code":"extract_1d(zargs)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting information for our default/provided plot1d() — extract_1d","text":"zargs argument list passed zenplot(). must least contain x, orientations, vars, num, lim labs; see zenplot() explanation variables.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting information for our default/provided plot1d() — extract_1d","text":"list list x: data plotted 1d plot xcols: list columns x groups: group numbers column x vars: variable numbers column x glabs: group labels column x vlabs: variable labels column x horizontal: logical indicating                                  whether plot horizontal vertical, xlim: axis limits.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_1d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracting information for our default/provided plot1d() — extract_1d","text":"auxiliary function called zargs within          1d plotting function (e.g. hist_1d_grid,          density_1d_graphics, points_1d_loon)          extract 1d data zargs needed plotting.          performance reasons, checking input object done.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_1d.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extracting information for our default/provided plot1d() — extract_1d","text":"Performance critical","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_1d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracting information for our default/provided plot1d() — extract_1d","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting information for our default/provided plot1d() — extract_1d","text":"","code":"## This function is used within the default (any user defined) ## 1d plots my_1d_plot <- function(zargs, your_name = \"Bob\", ...) {                    data_1d <- extract_1d(zargs)                    msg <- paste(\"Components of zargs available\",                                 \"to construct a 1d plot for \",                                 your_name)                    print(msg)                    ## just print the names of the data components                    ## which you might want to use in your plot                    print(names(data_1d))                    ## You might have to draw your 1d plot differently depending                    ## upon whether it is to appear horizontally or vertically                    if (data_1d$horizontal) {                           print(\"This plot would be horizontal\")                           } else {                           print(\"This one would be vertical\")                     }                     ## You can plot whatever you want using the information in                     ## could use any of these to construct any 1d plot you want                     ## using R's graphics or any of zemplot's built in 1d plots.                     ##                     ## For example, here we use zenplot's base graphics functions                     ## First a histogram                     hist_1d_graphics(zargs, ...)                     ## to which we add the variable label                     label_1d_graphics(zargs, add = TRUE, col = \"red\", ...)                     ## similar functions could be called for the other packages.                     ## You can print the source of anyone of the default functions                     ## to get some idea of managing details.                     }  ## And now try it out zenplot(iris[,1:3], plot1d = my_1d_plot) #> [1] \"Components of zargs available to construct a 1d plot for  Bob\" #> [1] \"x\"          \"xcols\"      \"groups\"     \"vars\"       \"glabs\"      #> [6] \"vlabs\"      \"horizontal\" \"xlim\"       #> [1] \"This plot would be horizontal\" #> [1] \"Components of zargs available to construct a 1d plot for  Bob\" #> [1] \"x\"          \"xcols\"      \"groups\"     \"vars\"       \"glabs\"      #> [6] \"vlabs\"      \"horizontal\" \"xlim\"       #> [1] \"This one would be vertical\" #> [1] \"Components of zargs available to construct a 1d plot for  Bob\" #> [1] \"x\"          \"xcols\"      \"groups\"     \"vars\"       \"glabs\"      #> [6] \"vlabs\"      \"horizontal\" \"xlim\"       #> [1] \"This plot would be horizontal\""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting information for our default/provided plot2d() — extract_2d","title":"Extracting information for our default/provided plot2d() — extract_2d","text":"Extracting information default/provided plot2d()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting information for our default/provided plot2d() — extract_2d","text":"","code":"extract_2d(zargs)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting information for our default/provided plot2d() — extract_2d","text":"zargs argument list  passed zenplot(). must least contain x, vars, num, lim labs (extract_2d());  see zenplot() explanation variables.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting information for our default/provided plot2d() — extract_2d","text":"list list x y: data plotted 2d plot xcols: list columns x groups: group numbers column x vars: variable numbers column x glabs: group labels column x vlabs: variable labels column x xlim ylim: x-axis y-axis limits, .group: logical indicating        whether x y variables belong group.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_2d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracting information for our default/provided plot2d() — extract_2d","text":"auxiliary function called zargs within          1d plotting function (e.g. hist_1d_grid,          density_1d_graphics, points_1d_loon)          extract 1d data zargs needed plotting.          performance reasons, checking input object done.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_2d.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extracting information for our default/provided plot2d() — extract_2d","text":"Performance critical","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_2d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extracting information for our default/provided plot2d() — extract_2d","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting information for our default/provided plot2d() — extract_2d","text":"","code":"## This function is used within the default (any user defined) ## 2d plot functions ## my_2d_plot <- function(zargs, your_name = \"BillyBob\", ...) {                    data_2d <- extract_2d(zargs)                    msg <- paste(\"Components of zargs available\",                                 \"to construct a 2d plot for \",                                 your_name)                    print(msg)                    ## just print the names of the data components                    ## which you might want to use in your plot                    print(names(data_2d))                     ## You can plot whatever you want using the information in                    ## could use any of these to construct any 1d plot you want                    ## using R's graphics or any of zemplot's built in 1d plots.                    ##                    ## For example, here we could use                    ## use zenplot's base graphics functions                    ## First a scatterplot                    points_2d_graphics(zargs, ...)                    ## to which we overlay density contours                    density_2d_graphics(zargs, add = TRUE, col = \"steelblue\", ...)                    ## similar functions could be called for the other packages.                    ## You can print the source of anyone of the default functions                    ## to get some idea of managing details.                 }  ## And now try it out zenplot(iris, plot2d = my_2d_plot) #> [1] \"Components of zargs available to construct a 2d plot for  BillyBob\" #>  [1] \"x\"          \"y\"          \"xcols\"      \"groups\"     \"vars\"       #>  [6] \"glabs\"      \"vlabs\"      \"xlim\"       \"ylim\"       \"same.group\" #> [1] \"Components of zargs available to construct a 2d plot for  BillyBob\" #>  [1] \"x\"          \"y\"          \"xcols\"      \"groups\"     \"vars\"       #>  [6] \"glabs\"      \"vlabs\"      \"xlim\"       \"ylim\"       \"same.group\" #> [1] \"Components of zargs available to construct a 2d plot for  BillyBob\" #>  [1] \"x\"          \"y\"          \"xcols\"      \"groups\"     \"vars\"       #>  [6] \"glabs\"      \"vlabs\"      \"xlim\"       \"ylim\"       \"same.group\" #> [1] \"Components of zargs available to construct a 2d plot for  BillyBob\" #>  [1] \"x\"          \"y\"          \"xcols\"      \"groups\"     \"vars\"       #>  [6] \"glabs\"      \"vlabs\"      \"xlim\"       \"ylim\"       \"same.group\""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Pairs from a Path of Indices — extract_pairs","title":"Extract Pairs from a Path of Indices — extract_pairs","text":"Extracts pairs path indices, representing path pairs (connected common variable) return shortened path.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Pairs from a Path of Indices — extract_pairs","text":"","code":"extract_pairs(x, n)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Pairs from a Path of Indices — extract_pairs","text":"x path, vector list indices variables plotted. n vector length two giving number pairs extract path x (NULL, pairs returned (nothing extracted); length one, replicated pair). first number corresponds beginning path, second end; least one two numbers >= 1.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Pairs from a Path of Indices — extract_pairs","text":"returns object type input x (possibly) shortened. extracts first/last -many pairs x.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_pairs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract Pairs from a Path of Indices — extract_pairs","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/extract_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Pairs from a Path of Indices — extract_pairs","text":"","code":"## Begin with a path (zp <- zenpath(c(3, 5), method = \"eulerian.cross\")) # integer(2) argument #>  [1] 1 4 2 5 1 6 2 7 1 8 3 4 3 6 7 3 5 8 2  ## Extract the first two pairs and last four of indices extract_pairs(zp, n = c(2, 4)) #> [1] 1 4 2 7 3 5 8 2  ## Extract the first and last three pairs of indices extract_pairs(zp, n = 3) # the 3 is repeated automatically #> [1] 1 4 2 5 3 5 8 2"},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the layout of the zen plot — get_layout","title":"Compute the layout of the zen plot — get_layout","text":"Compute layout zen plot","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the layout of the zen plot — get_layout","text":"","code":"get_layout(   turns,   n2dplots,   first1d = TRUE,   last1d = TRUE,   width1d = 1,   width2d = 10 )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the layout of the zen plot — get_layout","text":"turns turns (character vector consisting \"u\", \"d\", \"l\", \"r\") n2dplots number 2d plots (faces hypercube laid ) first1d logical indicating whether first 1d plot plotted last1d logical indicating whether last 1d plot plotted width1d width 1d plots width2d width 2d plots","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the layout of the zen plot — get_layout","text":"list containing         1) plot orientations (c(\"h\", \"s\", \"v\", \"s\", ...))         2) plot dimensions (1d plot, 2d plot, 1d plot, ...)         3) variable numbers plotted ((nPlots, 2)-matrix)         4) total width layout         5) total height layout         6) coordinates bounding boxes","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_layout.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the layout of the zen plot — get_layout","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Computing the path according to the provided method — get_path","title":"Computing the path according to the provided method — get_path","text":"Computing path according provided method","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computing the path according to the provided method — get_path","text":"","code":"get_path(   turns = NULL,   n2dcols = c(\"letter\", \"square\", \"A4\", \"golden\", \"legal\"),   n2dplots,   method = c(\"tidy\", \"double.zigzag\", \"single.zigzag\", \"rectangular\"),   first1d = TRUE,   last1d = TRUE )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computing the path according to the provided method — get_path","text":"turns turns n2dcols number columns 2d plots (>= 1) one \"letter\", \"square\", \"A4\", \"golden\", \"legal\". Note n2dcols ignored turns NULL. n2dplots number 2d plots laid method character string indicating method according path built first1d logical indicating whether first 1d plot plotted last1d logical indicating whether last 1d plot plotted","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computing the path according to the provided method — get_path","text":"path, list containing turns, positions (indices         occupancy matrix) occupancy matrix","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_path.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computing the path according to the provided method — get_path","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_zigzag_turns.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute turns for zigzag — get_zigzag_turns","title":"Compute turns for zigzag — get_zigzag_turns","text":"Compute turns zigzag","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_zigzag_turns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute turns for zigzag — get_zigzag_turns","text":"","code":"get_zigzag_turns(   nPlots,   n2dcols,   method = c(\"tidy\", \"double.zigzag\", \"single.zigzag\") )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_zigzag_turns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute turns for zigzag — get_zigzag_turns","text":"nPlots total number plots n2dcols number columns 2d plots (>= 1) method character string indicating zigzag method use","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_zigzag_turns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute turns for zigzag — get_zigzag_turns","text":"turns","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/get_zigzag_turns.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute turns for zigzag — get_zigzag_turns","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/graph_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn pairs or paths into a graph — graph_pairs","title":"Turn pairs or paths into a graph — graph_pairs","text":"Pairs processed produce graph elements pairs vertices pairs undirected edges. result can displayed using plot().","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/graph_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn pairs or paths into a graph — graph_pairs","text":"","code":"graph_pairs(x, var.names = NULL, edgemode = c(\"undirected\", \"directed\"))"},{"path":"https://great-northern-diver.github.io/zenplots/reference/graph_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn pairs or paths into a graph — graph_pairs","text":"x matrix list pairs along zenpath. Can also list containing vectors representing paths graph. Every path must length least 2 (.e. vector element list). var.names names variables appearing x. edgemode type edges used: either \"undirected\" (default) \"directed\" (case order nodes pair matters).","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/graph_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn pairs or paths into a graph — graph_pairs","text":"graphNEL object; can displayed using plot().","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/graph_pairs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Turn pairs or paths into a graph — graph_pairs","text":"zenplot() never use directed graphs graphs isolated (disconnected) nodes.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/graph_pairs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Turn pairs or paths into a graph — graph_pairs","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/graph_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn pairs or paths into a graph — graph_pairs","text":"","code":"## To display the graphs, ## the Rgraphviz package from Bioconductor ## has_Rgraphviz <- requireNamespace(\"Rgraphviz\", quietly = TRUE)  ## Get some pairs pairs <- matrix(c(1,2, 5,1, 3,4, 2,3, 4,2), ncol = 2, byrow = TRUE) g <- graph_pairs(pairs) ## which can be displayed using plot(g) from Rgraphviz if (has_Rgraphviz){   Rgraphviz::plot(g) }   ## Build a graph from a list of paths paths <- list(3:1, c(3,5,7), c(1,4,7), c(6,7)) gp <- graph_pairs(paths) if (has_Rgraphviz){   ## graph package draws with grid, so clear   grid::grid.newpage()      Rgraphviz::plot(gp) }   ## Nodes do not need to be numbers alpha_paths <- list(letters[3:1], letters[c(3,5,7)],                     letters[c(1,4,7)], letters[c(6,7)]) if (has_Rgraphviz){   grid::grid.newpage()   Rgraphviz::plot(graph_pairs(alpha_paths))   }   ## Zenplots never uses this feature but you could ## build a directed graph with a single isolated node dg <- graph_pairs(alpha_paths,                   var.names = c(letters[1:7], \"ALONE\"),                   edgemode = \"directed\" )  if (has_Rgraphviz){   grid::grid.newpage()   Rgraphviz::plot(dg)   }"},{"path":"https://great-northern-diver.github.io/zenplots/reference/groupData.html","id":null,"dir":"Reference","previous_headings":"","what":"Splitting a Matrix into a List of Matrices — groupData","title":"Splitting a Matrix into a List of Matrices — groupData","text":"Takes matrix x groups rows (columns) specified indices.  Returns list matrices, one group.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/groupData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splitting a Matrix into a List of Matrices — groupData","text":"","code":"groupData(x, indices, byrow = FALSE)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/groupData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splitting a Matrix into a List of Matrices — groupData","text":"x matrix (object convertible via .matrix()). indices list vectors indices according x grouped; vector indices define group. byrow logical indicating whether grouping done row (byrow = TRUE) column (byrow = FALSE, default).","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/groupData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splitting a Matrix into a List of Matrices — groupData","text":"list matrices (one per group).         list, grouped columns, typically passed zenplot().","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/groupData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Splitting a Matrix into a List of Matrices — groupData","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/groupData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Splitting a Matrix into a List of Matrices — groupData","text":"","code":"## get a matrix x <- matrix(1:15, ncol = 3) colGroups <- list(c(1,2), list(2:3)) rowGroups <- list(c(1,4), list(2:3)) groupData(x, indices = colGroups) #> [[1]] #>      [,1] [,2] #> [1,]    1    6 #> [2,]    2    7 #> [3,]    3    8 #> [4,]    4    9 #> [5,]    5   10 #>  #> [[2]] #>      [,1] [,2] #> [1,]    6   11 #> [2,]    7   12 #> [3,]    8   13 #> [4,]    9   14 #> [5,]   10   15 #>  groupData(x, indices = rowGroups, byrow = TRUE) #> [[1]] #>      [,1] [,2] [,3] #> [1,]    1    6   11 #> [2,]    4    9   14 #>  #> [[2]] #>      [,1] [,2] [,3] #> [1,]    2    7   12 #> [2,]    3    8   13 #>"},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of labels indicating adjacent groups using R's base graphics — group_2d_graphics","title":"Plot of labels indicating adjacent groups using R's base graphics — group_2d_graphics","text":"Plot labels indicating adjacent groups using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of labels indicating adjacent groups using R's base graphics — group_2d_graphics","text":"","code":"group_2d_graphics(   zargs,   glabs = NULL,   sep = \"\\n\",   loc = c(0.5, 0.5),   add = FALSE,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of labels indicating adjacent groups using R's base graphics — group_2d_graphics","text":"zargs argument list passed zenplot() glabs group labels indexed plot variables (thus length number variables); NULL determined extract_2d() sep group label separator loc (x,y)-location [0,1]^2; 0 corresponds left, 1 right (direction path) add logical indicating whether plot added last one plot... additional arguments passed plot_region() ... additional arguments passed text()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of labels indicating adjacent groups using R's base graphics — group_2d_graphics","text":"invisible()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_graphics.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot of labels indicating adjacent groups using R's base graphics — group_2d_graphics","text":"performance reasons (avoiding call extract_2d() twice),       'glabs' extra argument","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot of labels indicating adjacent groups using R's base graphics — group_2d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of labels indicating adjacent groups using the grid package — group_2d_grid","title":"Plot of labels indicating adjacent groups using the grid package — group_2d_grid","text":"Plot labels indicating adjacent groups using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of labels indicating adjacent groups using the grid package — group_2d_grid","text":"","code":"group_2d_grid(   zargs,   glabs = NULL,   sep = \"\\n\",   loc = c(0.5, 0.5),   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of labels indicating adjacent groups using the grid package — group_2d_grid","text":"zargs argument list passed zenplot() glabs group labels indexed plot variables (thus length number variables); NULL determined extract_2d() sep group label separator loc (x,y)-location [0,1]^2; 0 corresponds left, 1 right (direction path) draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of labels indicating adjacent groups using the grid package — group_2d_grid","text":"grob (invisibly)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_grid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot of labels indicating adjacent groups using the grid package — group_2d_grid","text":"performance reasons (avoiding call extract_2d() twice),       'glabs' extra argument","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot of labels indicating adjacent groups using the grid package — group_2d_grid","text":"Marius Hofert","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of labels indicating adjacent groups using the interactive loon package — group_2d_loon","title":"Plot of labels indicating adjacent groups using the interactive loon package — group_2d_loon","text":"Plot labels indicating adjacent groups using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of labels indicating adjacent groups using the interactive loon package — group_2d_loon","text":"","code":"group_2d_loon(   zargs,   glabs = NULL,   sep = \"\\n\",   size = 8,   rot = 0,   baseplot = NULL,   parent = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of labels indicating adjacent groups using the interactive loon package — group_2d_loon","text":"zargs argument list passed zenplot() glabs group labels indexed plot variables (thus length number variables); NULL determined extract_2d() sep group label separator size plot size rot rotation baseplot non-NULL base plot plot layered parent tk parent loon plot widget ... Additional arguments passed text()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of labels indicating adjacent groups using the interactive loon package — group_2d_loon","text":"invisible()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_loon.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot of labels indicating adjacent groups using the interactive loon package — group_2d_loon","text":"performance reasons (avoiding call extract_2d() twice),       'glabs' extra argument","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/group_2d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot of labels indicating adjacent groups using the interactive loon package — group_2d_loon","text":"Marius Hofert & Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/happiness.html","id":null,"dir":"Reference","previous_headings":"","what":"World Happiness Data Set — happiness","title":"World Happiness Data Set — happiness","text":"Data set consisting 498 rows 12 columns containing data   World Happiness Report three years.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/happiness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"World Happiness Data Set — happiness","text":"","code":"data(\"happiness\")"},{"path":"https://great-northern-diver.github.io/zenplots/reference/happiness.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"World Happiness Data Set — happiness","text":"data.frame() 12 columns: Time: year World Happiness Report. Region: region world. Country: country. Happiness: happiness score measured respective       year (see Time) asking “rate       happiness scale 0 10 10 happiest?”. Rank: rank country based Happiness. GDP: extent gross domestic product per       capita contributed calculation Happiness. Family: extent family contributed       calculation Happiness. Health: extent life expectancy contributed       calculation Happiness. Freedom: extent freedom contributed       calculation Happiness. Corruption: extent perception corruption       contributed calculation Happiness. Generosity: extent generosity       contributed calculation Happiness. Dystopia: extent dystopia residual       contributed calculation Happiness. Dystopia       imaginary country world's       least-happy people (can act benchmark       countries can favorably compared).","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/happiness.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"World Happiness Data Set — happiness","text":"data set obtained https://www.kaggle.com/unsdsn/world-happiness   2018-04-20 three different .csv files (one year). Joint   columns (variables) built, rows expanded (  year) sorted acorrding Region   Country. Finally, Time added obtain single data set.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/happiness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"World Happiness Data Set — happiness","text":"GDP, Family, Health, Freedom, Corruption Generosity describe   extent factors contribute evaluating happiness   country. added together Dystopia, one receives   happiness score.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/happiness.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"World Happiness Data Set — happiness","text":"https://www.kaggle.com/unsdsn/world-happiness","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/happiness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"World Happiness Data Set — happiness","text":"","code":"data(\"happiness\") stopifnot(all.equal(rowSums(happiness[,c(\"GDP\", \"Family\", \"Health\", \"Freedom\",                                          \"Corruption\", \"Generosity\",                                          \"Dystopia\")]),                     happiness[, \"Happiness\"], tol = 5e-5))"},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram as 1d plot using R's base graphics — hist_1d_graphics","title":"Histogram as 1d plot using R's base graphics — hist_1d_graphics","text":"Histogram 1d plot using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram as 1d plot using R's base graphics — hist_1d_graphics","text":"","code":"hist_1d_graphics(   zargs,   breaks = NULL,   length.out = 21,   col = NULL,   axes = FALSE,   add = TRUE,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram as 1d plot using R's base graphics — hist_1d_graphics","text":"zargs argument list passed zenplot() breaks see ?hist; default 20 equi-width bins covering data range length.number break points breaks = NULL col vector colors bars bar components; see ?barplot axes logicial indicating whether axes drawn add logical indicating whether plot added last one plot... additional arguments passed plot_region() ... additional arguments passed barplot()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram as 1d plot using R's base graphics — hist_1d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Histogram as 1d plot using R's base graphics — hist_1d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram in 1d using the grid package — hist_1d_grid","title":"Histogram in 1d using the grid package — hist_1d_grid","text":"Histogram 1d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram in 1d using the grid package — hist_1d_grid","text":"","code":"hist_1d_grid(   zargs,   breaks = NULL,   length.out = 21,   col = NULL,   fill = NULL,   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram in 1d using the grid package — hist_1d_grid","text":"zargs argument list passed zenplot() breaks see ?hist; default 20 equi-width bins covering data range length.number break points breaks = NULL col colour histogram bar interiors, unless fill specified, colour border fill logical passed underlying rectGrob() draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram in 1d using the grid package — hist_1d_grid","text":"grob (invisibly)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Histogram in 1d using the grid package — hist_1d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram in 1d using the interactive loon package — hist_1d_loon","title":"Histogram in 1d using the interactive loon package — hist_1d_loon","text":"Histogram 1d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram in 1d using the interactive loon package — hist_1d_loon","text":"","code":"hist_1d_loon(   zargs,   breaks = NULL,   color = NULL,   fill = NULL,   showStackedColors = TRUE,   showBinHandle = FALSE,   showLabels = FALSE,   linkingGroup = NULL,   showScales = FALSE,   showGuides = FALSE,   parent = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram in 1d using the interactive loon package — hist_1d_loon","text":"zargs argument list passed zenplot() breaks Argument passed hist() get information bins. Default 20 equi-width bins covering range x color colour histogram bar interiors, unless fill specified, colour border fill colour histogram bar interior given showStackedColors Logical determining whether show individual point colours stacked histogram showBinHandle Logical show handle adjust bins showLabels Logical determining whether axis labels displayed linkingGroup string specifying initial group plots linked plot showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed parent tk parent loon plot widget ... Additional parameters passed loon::l_hist()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram in 1d using the interactive loon package — hist_1d_loon","text":"loon loon::l_plot(...)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/hist_1d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Histogram in 1d using the interactive loon package — hist_1d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/indexData.html","id":null,"dir":"Reference","previous_headings":"","what":"Indexing a Matrix or Data Frame According to Given Indices — indexData","title":"Indexing a Matrix or Data Frame According to Given Indices — indexData","text":"Indexing Matrix Data Frame According Given Indices","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/indexData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indexing a Matrix or Data Frame According to Given Indices — indexData","text":"","code":"indexData(x, indices)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/indexData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indexing a Matrix or Data Frame According to Given Indices — indexData","text":"x matrix data.frame (useful latter). indices vector column indices x (typically obtained zenpath()).","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/indexData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indexing a Matrix or Data Frame According to Given Indices — indexData","text":"object x        (typically data.frame         matrix) containing x         indexed indices.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/indexData.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Indexing a Matrix or Data Frame According to Given Indices — indexData","text":"Useful constructing data.frames without .1, .2, ...       names indexing data.frame zenpath.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/indexData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Indexing a Matrix or Data Frame According to Given Indices — indexData","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/indexData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indexing a Matrix or Data Frame According to Given Indices — indexData","text":"","code":"## The function is handiest for data frames ## where we want to reuse the variable names ## without adding a suffix like \".1\" etc. ## For example, x <-  BOD  # Biochemical Oxygen Demand data in base R indices <- rep(1:2, 2) ## now compare indexData(x, indices) #>   Time demand Time demand #> 1    1    8.3    1    8.3 #> 2    2   10.3    2   10.3 #> 3    3   19.0    3   19.0 #> 4    4   16.0    4   16.0 #> 5    5   15.6    5   15.6 #> 6    7   19.8    7   19.8 ## to x[, indices] #>   Time demand Time.1 demand.1 #> 1    1    8.3      1      8.3 #> 2    2   10.3      2     10.3 #> 3    3   19.0      3     19.0 #> 4    4   16.0      4     16.0 #> 5    5   15.6      5     15.6 #> 6    7   19.8      7     19.8 ## zenplots prefer not to have the suffixes."},{"path":"https://great-northern-diver.github.io/zenplots/reference/is.standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Argument for Being a Vector, Matrix, Data Frame or a List of such — is.standard","title":"Check Argument for Being a Vector, Matrix, Data Frame or a List of such — is.standard","text":"Check Argument Vector, Matrix, Data Frame List ","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/is.standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Argument for Being a Vector, Matrix, Data Frame or a List of such — is.standard","text":"","code":"is.standard(x)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/is.standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Argument for Being a Vector, Matrix, Data Frame or a List of such — is.standard","text":"x vector, matrix, data.frame list ","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/is.standard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Argument for Being a Vector, Matrix, Data Frame or a List of such — is.standard","text":"logical indicating whether x type","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/is.standard.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check Argument for Being a Vector, Matrix, Data Frame or a List of such — is.standard","text":"Marius Hofert","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Jittered dot plot in 1d using R's base graphics — jitter_1d_graphics","title":"Jittered dot plot in 1d using R's base graphics — jitter_1d_graphics","text":"Jittered dot plot 1d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jittered dot plot in 1d using R's base graphics — jitter_1d_graphics","text":"","code":"jitter_1d_graphics(   zargs,   loc = 0.5,   offset = 0.25,   cex = 0.4,   add = FALSE,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jittered dot plot in 1d using R's base graphics — jitter_1d_graphics","text":"zargs argument list passed zenplot() loc location [0,1]; 0 corresponds left, 1 right (direction path) offset number [0,0.5] determining far center jittered points reach maximally cex character expansion factor add logical indicating whether plot added last one plot... additional arguments passed plot_region() ... additional arguments passed points()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jittered dot plot in 1d using R's base graphics — jitter_1d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Jittered dot plot in 1d using R's base graphics — jitter_1d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Jittered dot plot in 1d using the grid package — jitter_1d_grid","title":"Jittered dot plot in 1d using the grid package — jitter_1d_grid","text":"Jittered dot plot 1d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jittered dot plot in 1d using the grid package — jitter_1d_grid","text":"","code":"jitter_1d_grid(   zargs,   loc = 0.5,   offset = 0.25,   pch = 21,   size = 0.02,   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jittered dot plot in 1d using the grid package — jitter_1d_grid","text":"zargs argument list passed zenplot() loc location [0,1]; 0 corresponds left, 1 right (direction path) offset number [0,0.5] determining far center jittered points reach maximally pch plotting symbol size size plotting symbol draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jittered dot plot in 1d using the grid package — jitter_1d_grid","text":"grob (invisibly)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_grid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Jittered dot plot in 1d using the grid package — jitter_1d_grid","text":"default point size chosen match default graphics","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Jittered dot plot in 1d using the grid package — jitter_1d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Jittered dot plot in 1d using the interactive loon package — jitter_1d_loon","title":"Jittered dot plot in 1d using the interactive loon package — jitter_1d_loon","text":"Jittered dot plot 1d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jittered dot plot in 1d using the interactive loon package — jitter_1d_loon","text":"","code":"jitter_1d_loon(   zargs,   linkingGroup = NULL,   showLabels = FALSE,   showScales = FALSE,   showGuides = FALSE,   glyph = \"ocircle\",   itemLabel = NULL,   showItemLabels = TRUE,   parent = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jittered dot plot in 1d using the interactive loon package — jitter_1d_loon","text":"zargs argument list passed zenplot() linkingGroup string specifying initial group plots linked plot showLabels Logical determining whether axis labels displayed showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed glyph Glyph used points, default open circle: \"ocircle\" itemLabel vector strings serve item labels showItemLabels Logical determing whether item labels display mouse hover parent tk parent loon plot widget ... Additional parameters passed loon::l_plot()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jittered dot plot in 1d using the interactive loon package — jitter_1d_loon","text":"loon loon::l_plot(...)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/jitter_1d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Jittered dot plot in 1d using the interactive loon package — jitter_1d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/l_ispace_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Configuring a loon plot to accommodate ispace — l_ispace_config","title":"Configuring a loon plot to accommodate ispace — l_ispace_config","text":"Configuring loon plot accommodate ispace","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/l_ispace_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configuring a loon plot to accommodate ispace — l_ispace_config","text":"","code":"l_ispace_config(   baseplot,   ispace = NULL,   x = NULL,   y = NULL,   xlim = NULL,   ylim = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/l_ispace_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configuring a loon plot to accommodate ispace — l_ispace_config","text":"baseplot plot modified ispace inner space ([0,1]) x x data y y data xlim x-axis limits; NULL, data limits used ylim y-axis limits; NULL, data limits used ... Additional arguments passed loon::l_configure","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/l_ispace_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configuring a loon plot to accommodate ispace — l_ispace_config","text":"baseplot","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/l_ispace_config.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Configuring a loon plot to accommodate ispace — l_ispace_config","text":"R. W. Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Label plot in 1d using R's base graphics — label_1d_graphics","title":"Label plot in 1d using R's base graphics — label_1d_graphics","text":"Label plot 1d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label plot in 1d using R's base graphics — label_1d_graphics","text":"","code":"label_1d_graphics(   zargs,   loc = c(0.5, 0.5),   label = NULL,   box = FALSE,   add = FALSE,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label plot in 1d using R's base graphics — label_1d_graphics","text":"zargs argument list passed zenplot() loc (x,y)-location [0,1]^2; 0 corresponds left, 1 right (direction path) label label used box logical indicating whether box drawn. add logical indicating whether plot added last one plot... additional arguments passed plot_region() ... additional arguments passed text() box()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label plot in 1d using R's base graphics — label_1d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Label plot in 1d using R's base graphics — label_1d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Label plot in 1d using the grid package — label_1d_grid","title":"Label plot in 1d using the grid package — label_1d_grid","text":"Label plot 1d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label plot in 1d using the grid package — label_1d_grid","text":"","code":"label_1d_grid(   zargs,   loc = c(0.5, 0.5),   label = NULL,   cex = 0.66,   box = FALSE,   box.width = 1,   box.height = 1,   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label plot in 1d using the grid package — label_1d_grid","text":"zargs argument list passed zenplot() loc (x,y)-location [0,1]^2; 0 corresponds left, 1 right (direction path) label label used cex character expansion factor box logical indicating whether box drawn around text box.width width box box.height height box draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label plot in 1d using the grid package — label_1d_grid","text":"grob (invisibly)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Label plot in 1d using the grid package — label_1d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Label plot in 1d using the interactive loon package — label_1d_loon","title":"Label plot in 1d using the interactive loon package — label_1d_loon","text":"Label plot 1d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label plot in 1d using the interactive loon package — label_1d_loon","text":"","code":"label_1d_loon(   zargs,   loc.x = NULL,   loc.y = NULL,   label = NULL,   rot = NULL,   size = 8,   box = FALSE,   color = NULL,   linkingGroup = NULL,   showLabels = FALSE,   showScales = FALSE,   showGuides = FALSE,   baseplot = NULL,   parent = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label plot in 1d using the interactive loon package — label_1d_loon","text":"zargs argument list passed zenplot() loc.x x-location label loc.y y-location label label label used rot rotation label size font size box logical indicating whether label enclosed box. color Color label (box box = TRUE). linkingGroup string specifying initial group plots linked plot showLabels Logical determining whether axis labels displayed showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed baseplot non-null base plot plot layered parent tk parent loon plot widget ... Additional parameters passed loon::l_layer_text(...)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label plot in 1d using the interactive loon package — label_1d_loon","text":"loon::l_plot(...)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_1d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Label plot in 1d using the interactive loon package — label_1d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Label plot in 2d using R's base graphics — label_2d_graphics","title":"Label plot in 2d using R's base graphics — label_2d_graphics","text":"Label plot 2d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label plot in 2d using R's base graphics — label_2d_graphics","text":"","code":"label_2d_graphics(   zargs,   loc = c(0.98, 0.05),   label = NULL,   adj = 1:0,   box = FALSE,   add = FALSE,   group... = NULL,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label plot in 2d using R's base graphics — label_2d_graphics","text":"zargs argument list passed zenplot() loc (x,y)-location ((0,1)^2) center rectangle label label used adj x (optionally y) adjustment label box logical indicating whether box drawn add logical indicating whether plot added last one group... list arguments passed group_2d_graphics (NULL) plot... additional arguments passed plot_region() ... additional arguments passed rect()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label plot in 2d using R's base graphics — label_2d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Label plot in 2d using R's base graphics — label_2d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Label plot in 2d using the grid package — label_2d_grid","title":"Label plot in 2d using the grid package — label_2d_grid","text":"Label plot 2d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label plot in 2d using the grid package — label_2d_grid","text":"","code":"label_2d_grid(   zargs,   loc = c(0.98, 0.05),   label = NULL,   cex = 0.66,   just = c(\"right\", \"bottom\"),   rot = 0,   box = FALSE,   box.width = 1,   box.height = 1,   group... = list(cex = cex),   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label plot in 2d using the grid package — label_2d_grid","text":"zargs argument list passed zenplot() loc (x,y)-location [0,1]^2; 0 corresponds left, 1 right (direction path) label label used cex character expansion factor just (x,y)-justification label rot rotation label box logical indicating whether box drawn box.width width box box.height height box group... list arguments passed group_2d_grid (NULL) draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label plot in 2d using the grid package — label_2d_grid","text":"grob (invisibly)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Label plot in 2d using the grid package — label_2d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Label plot in 2d using the interactive loon package — label_2d_loon","title":"Label plot in 2d using the interactive loon package — label_2d_loon","text":"Label plot 2d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label plot in 2d using the interactive loon package — label_2d_loon","text":"","code":"label_2d_loon(   zargs,   loc = NULL,   label = NULL,   rot = 0,   size = 8,   box = FALSE,   color = NULL,   linkingGroup = NULL,   showLabels = FALSE,   showScales = FALSE,   showGuides = FALSE,   baseplot = NULL,   parent = NULL,   group... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label plot in 2d using the interactive loon package — label_2d_loon","text":"zargs argument list passed zenplot() loc location label label label used rot rotation label size font size box logical indicating whether label enclosed box. color Color label (box box = TRUE). linkingGroup initial linking group showLabels Logical determining whether axis labels displayed showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed baseplot non-null base plot plot layered parent tk parent loon plot widget group... list arguments passed group_2d_loon (NULL) ... Additional parameters passed loon::l_layer_text(...)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label plot in 2d using the interactive loon package — label_2d_loon","text":"base loon::l_plot added text layer","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/label_2d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Label plot in 2d using the interactive loon package — label_2d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout plot in 1d — layout_1d_graphics","title":"Layout plot in 1d — layout_1d_graphics","text":"Layout plot 1d","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout plot in 1d — layout_1d_graphics","text":"","code":"layout_1d_graphics(zargs, ...)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout plot in 1d — layout_1d_graphics","text":"zargs argument list passed zenplot() ... additional arguments passed label_1d_graphics()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layout plot in 1d — layout_1d_graphics","text":"invisible()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Layout plot in 1d — layout_1d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout plot in 1d using the grid package — layout_1d_grid","title":"Layout plot in 1d using the grid package — layout_1d_grid","text":"Layout plot 1d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout plot in 1d using the grid package — layout_1d_grid","text":"","code":"layout_1d_grid(zargs, ...)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout plot in 1d using the grid package — layout_1d_grid","text":"zargs argument list passed zenplot() ... additional arguments passed label_1d_grid()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layout plot in 1d using the grid package — layout_1d_grid","text":"grob (invisibly)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Layout plot in 1d using the grid package — layout_1d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout plot in 1d using the interactive loon package — layout_1d_loon","title":"Layout plot in 1d using the interactive loon package — layout_1d_loon","text":"Layout plot 1d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout plot in 1d using the interactive loon package — layout_1d_loon","text":"","code":"layout_1d_loon(zargs, ...)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout plot in 1d using the interactive loon package — layout_1d_loon","text":"zargs argument list passed zenplot() ... Additional arguments passed label_1d_loon()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layout plot in 1d using the interactive loon package — layout_1d_loon","text":"invisible()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_1d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Layout plot in 1d using the interactive loon package — layout_1d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout plot in 2d — layout_2d_graphics","title":"Layout plot in 2d — layout_2d_graphics","text":"Layout plot 2d","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout plot in 2d — layout_2d_graphics","text":"","code":"layout_2d_graphics(zargs, ...)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout plot in 2d — layout_2d_graphics","text":"zargs argument list passed zenplot() ... additional arguments passed label_2d_graphics()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layout plot in 2d — layout_2d_graphics","text":"invisible()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_graphics.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Layout plot in 2d — layout_2d_graphics","text":"also pass '...' group_2d_grid() (easily adjust       font size etc.)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Layout plot in 2d — layout_2d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout plot in 2d using the grid package — layout_2d_grid","title":"Layout plot in 2d using the grid package — layout_2d_grid","text":"Layout plot 2d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout plot in 2d using the grid package — layout_2d_grid","text":"","code":"layout_2d_grid(zargs, ...)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout plot in 2d using the grid package — layout_2d_grid","text":"zargs argument list passed zenplot() ... additional arguments passed label_2d_grid()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layout plot in 2d using the grid package — layout_2d_grid","text":"grob (invisibly)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_grid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Layout plot in 2d using the grid package — layout_2d_grid","text":"also pass '...' group_2d_grid() (easily adjust       font size etc.)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Layout plot in 2d using the grid package — layout_2d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout plot in 2d using the interactive loon package — layout_2d_loon","title":"Layout plot in 2d using the interactive loon package — layout_2d_loon","text":"Layout plot 2d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout plot in 2d using the interactive loon package — layout_2d_loon","text":"","code":"layout_2d_loon(zargs, ...)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout plot in 2d using the interactive loon package — layout_2d_loon","text":"zargs argument list passed zenplot() ... Additional arguments passed label_2d_grid()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layout plot in 2d using the interactive loon package — layout_2d_loon","text":"loon plot","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_loon.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Layout plot in 2d using the interactive loon package — layout_2d_loon","text":"also pass '...' group_2d_loon() (easily adjust       font size etc.)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/layout_2d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Layout plot in 2d using the interactive loon package — layout_2d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Line plot in 1d using R's base graphics — lines_1d_graphics","title":"Line plot in 1d using R's base graphics — lines_1d_graphics","text":"Line plot 1d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Line plot in 1d using R's base graphics — lines_1d_graphics","text":"","code":"lines_1d_graphics(   zargs,   loc = c(0.5, 0.5),   length = 1,   add = FALSE,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Line plot in 1d using R's base graphics — lines_1d_graphics","text":"zargs argument list passed zenplot() loc (x,y)-location [0,1]^2; 0 corresponds left, 1 right (direction path) length length line ([0,1]) add logical indicating whether plot added last one plot... additional arguments passed plot_region() ... additional arguments passed lines()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Line plot in 1d using R's base graphics — lines_1d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Line plot in 1d using R's base graphics — lines_1d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Lines plot in 1d using the grid package — lines_1d_grid","title":"Lines plot in 1d using the grid package — lines_1d_grid","text":"Lines plot 1d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lines plot in 1d using the grid package — lines_1d_grid","text":"","code":"lines_1d_grid(   zargs,   loc = c(0.5, 0.5),   length = 1,   arrow = NULL,   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lines plot in 1d using the grid package — lines_1d_grid","text":"zargs argument list passed zenplot() loc (x,y)-location [0,1]^2; 0 corresponds left, 1 right (direction path) length length line ([0,1]) arrow list describing arrow head draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lines plot in 1d using the grid package — lines_1d_grid","text":"grob (invisibly)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lines plot in 1d using the grid package — lines_1d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Lines plot in 1d using the interactive loon package — lines_1d_loon","title":"Lines plot in 1d using the interactive loon package — lines_1d_loon","text":"Lines plot 1d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lines plot in 1d using the interactive loon package — lines_1d_loon","text":"","code":"lines_1d_loon(   zargs,   loc.x = NULL,   loc.y = NULL,   color = NULL,   lwd = 1,   linkingGroup = NULL,   showLabels = FALSE,   showScales = FALSE,   showGuides = FALSE,   baseplot = NULL,   parent = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lines plot in 1d using the interactive loon package — lines_1d_loon","text":"zargs argument list passed zenplot() loc.x x-coordinates points line loc.y y-coordinates pointson line color Colour line lwd line width linkingGroup string specifying initial group plots linked plot (ignored) showLabels Logical determining whether axis labels displayed showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed baseplot non-null base plot plot layered parent tk parent loon plot widget ... Additional parameters passed loon::l_layer_text(...)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lines plot in 1d using the interactive loon package — lines_1d_loon","text":"loon loon::l_plot(...)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/lines_1d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lines plot in 1d using the interactive loon package — lines_1d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/move.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the new position when moving from the current position in a given direction — move","title":"Determine the new position when moving from the current position in a given direction — move","text":"Determine new position moving current position        given direction","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the new position when moving from the current position in a given direction — move","text":"","code":"move(curpos, dir, method = c(\"in.occupancy\", \"in.plane\"))"},{"path":"https://great-northern-diver.github.io/zenplots/reference/move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the new position when moving from the current position in a given direction — move","text":"curpos current position (, j) occupancy matrix dir direction move (\"d\", \"u\", \"r\" \"l\") method choice method (\".occupancy\" means (current/new) position given terms (row, column) indices occupancy matrix; \".plane\" means directions interpreted (x,y)-plane).","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/move.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the new position when moving from the current position in a given direction — move","text":"new position occupancy matrix","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/move.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determine the new position when moving from the current position in a given direction — move","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/n2dcols_aux.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliary Function for Constructing Default n2dcols — n2dcols_aux","title":"Auxiliary Function for Constructing Default n2dcols — n2dcols_aux","text":"Auxiliary Function Constructing Default n2dcols","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/n2dcols_aux.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliary Function for Constructing Default n2dcols — n2dcols_aux","text":"","code":"n2dcols_aux(n2dplots, method = c(\"letter\", \"square\", \"A4\", \"golden\", \"legal\"))"},{"path":"https://great-northern-diver.github.io/zenplots/reference/n2dcols_aux.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliary Function for Constructing Default n2dcols — n2dcols_aux","text":"n2dplots number variates (= nfaces) method One \"letter\", \"square\", \"A4\", \"golden\", \"legal\"","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/n2dcols_aux.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliary Function for Constructing Default n2dcols — n2dcols_aux","text":"odd integer n2dcols","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/n2dcols_aux.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Auxiliary Function for Constructing Default n2dcols — n2dcols_aux","text":"Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/na_omit_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to remove NAs for loon plots — na_omit_loon","title":"Helper function to remove NAs for loon plots — na_omit_loon","text":"Helper function remove NAs loon plots","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/na_omit_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to remove NAs for loon plots — na_omit_loon","text":"","code":"na_omit_loon(x, y = NULL, linkingKey = NULL, itemLabel = NULL)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/na_omit_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to remove NAs for loon plots — na_omit_loon","text":"x vector x values (required) y vector y values (optional) length x; NULL ignored. linkingKey vector keys used define links points, length x; NULL 0:(length(x)-1). itemLabel vector labels points, length x; NULL constructed.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/na_omit_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to remove NAs for loon plots — na_omit_loon","text":"list(x, y, linkingKey, itemLabel) NA x y         omitted ","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/na_omit_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Helper function to remove NAs for loon plots — na_omit_loon","text":"R. W. Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/next_move_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the next position to move to and the turn out of there — next_move_tidy","title":"Determine the next position to move to and the turn out of there — next_move_tidy","text":"Determine next position move turn ","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/next_move_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the next position to move to and the turn out of there — next_move_tidy","text":"","code":"next_move_tidy(plotNo, nPlots, curpath)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/next_move_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the next position to move to and the turn out of there — next_move_tidy","text":"plotNo current plot number nPlots total number plots curpath current path","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/next_move_tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the next position to move to and the turn out of there — next_move_tidy","text":"list containing next position move (nextpos) turn         (nextout); Interpretation:         nextpos: position plot number plotNo+1 (non-trimmed) occupancy matrix         nextout: turn nextpos","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/next_move_tidy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Determine the next position to move to and the turn out of there — next_move_tidy","text":"- assumes last plot 1d plot!       - also assumes first1d = TRUE; adapted later get_path()         case first1d = FALSE.       - start (1, 2) also additional last column occupancy         matrix first last column left case end         last 1d plot; happen 'zigzag' 'tidy'.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/next_move_tidy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determine the next position to move to and the turn out of there — next_move_tidy","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/num_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the number of columns if is.standard(x) — num_cols","title":"Determine the number of columns if is.standard(x) — num_cols","text":"Determine number columns .standard(x)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/num_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the number of columns if is.standard(x) — num_cols","text":"","code":"num_cols(x)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/num_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the number of columns if is.standard(x) — num_cols","text":"x numeric vector, matrix, data.frame list .","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/num_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the number of columns if is.standard(x) — num_cols","text":"number data columns 'x'","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/num_cols.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determine the number of columns if is.standard(x) — num_cols","text":"Marius Hofert","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/olive.html","id":null,"dir":"Reference","previous_headings":"","what":"Olive Oil Data Set — olive","title":"Olive Oil Data Set — olive","text":"Data set consisting 572 rows 10 columns containing data   olive oil.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/olive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Olive Oil Data Set — olive","text":"","code":"data(\"olive\")"},{"path":"https://great-northern-diver.github.io/zenplots/reference/olive.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Olive Oil Data Set — olive","text":"data.frame() 10 columns: Area: (larger) area. Region: (local) region. palmitic, palmitoleic, stearic,       oleic, linoleic, linolenic, arachidic,       eicosenoic: fatty acids measured.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/olive.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Olive Oil Data Set — olive","text":"data set obtained package pdfCluster (  convenience). contains 572 rows observations.  first   second column correspond area (Centre-North, South,   Sardinia) geographical region origin olive oils   (northern Apulia, southern Apulia, Calabria, Sicily, inland Sardinia   coast Sardinia, eastern western Liguria, Umbria),   respectively. remaining columns represent chemical   measurements (acid components oil specimens) palmitic,   palmitoleic, stearic, oleic, linoleic, linolenic, arachidic,   eicosenoic.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/olive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Olive Oil Data Set — olive","text":"","code":"data(\"olive\")"},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether functions (plot*d to zenplot()) exist — plot_exists","title":"Check whether functions (plot*d to zenplot()) exist — plot_exists","text":"Check whether functions (plot*d zenplot()) exist","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether functions (plot*d to zenplot()) exist — plot_exists","text":"","code":"plot_exists(x)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether functions (plot*d to zenplot()) exist — plot_exists","text":"x arguments plot1d plot2d zenplot()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether functions (plot*d to zenplot()) exist — plot_exists","text":"logical indicating whether x exists","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_exists.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check whether functions (plot*d to zenplot()) exist — plot_exists","text":"Check first whether function (rely able evaluated,       checks ) , string, whether exists","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_exists.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check whether functions (plot*d to zenplot()) exist — plot_exists","text":"Marius Hofert","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Indices of the Current Plot — plot_indices","title":"Plot Indices of the Current Plot — plot_indices","text":"Determining indices x y variables current plot","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Indices of the Current Plot — plot_indices","text":"","code":"plot_indices(zargs)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Indices of the Current Plot — plot_indices","text":"zargs argument list passed zenplot(). must least contain vars num; see zenplot() explanation variables..","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Indices of the Current Plot — plot_indices","text":"numeric(2) containing indices x y variables plotted current plot (plot number num). current plot 2d plot, variable used twice.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_indices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Indices of the Current Plot — plot_indices","text":"auxiliary function useful, example, writing user-provided 1d 2d plot functions.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_indices.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot Indices of the Current Plot — plot_indices","text":"exported one always figure       whether variables (axes) current plot need       switched manually.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_indices.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Indices of the Current Plot — plot_indices","text":"Marius Hofert","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to set up the plot region for graphics plots — plot_region","title":"Function to set up the plot region for graphics plots — plot_region","text":"Auxiliary function setting plot region 1d 2d graphics plots.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to set up the plot region for graphics plots — plot_region","text":"","code":"plot_region(xlim, ylim, plot... = NULL)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to set up the plot region for graphics plots — plot_region","text":"xlim x-axis limits ylim y-axis limits plot... arguments passed underlying plot()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to set up the plot region for graphics plots — plot_region","text":"invisible()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_region.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to set up the plot region for graphics plots — plot_region","text":"auxiliary function used provided graphics-related 1d 2d plots.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/plot_region.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to set up the plot region for graphics plots — plot_region","text":"Marius Hofert","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Dot plot in 1d using R's base graphics — points_1d_graphics","title":"Dot plot in 1d using R's base graphics — points_1d_graphics","text":"Dot plot 1d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dot plot in 1d using R's base graphics — points_1d_graphics","text":"","code":"points_1d_graphics(   zargs,   loc = 0.5,   cex = 0.4,   add = FALSE,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dot plot in 1d using R's base graphics — points_1d_graphics","text":"zargs argument list passed zenplot() loc location [0,1]; 0 corresponds left, 1 right (direction path) cex character expansion factor add logical indicating whether plot added last one plot... additional arguments passed plot_region() ... additional arguments passed points()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dot plot in 1d using R's base graphics — points_1d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dot plot in 1d using R's base graphics — points_1d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Dot plot in 1d using the grid package — points_1d_grid","title":"Dot plot in 1d using the grid package — points_1d_grid","text":"Dot plot 1d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dot plot in 1d using the grid package — points_1d_grid","text":"","code":"points_1d_grid(zargs, loc = 0.5, pch = 21, size = 0.02, draw = FALSE, ...)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dot plot in 1d using the grid package — points_1d_grid","text":"zargs argument list passed zenplot() loc location [0,1]; 0 corresponds left, 1 right (direction path) pch plotting symbol size size plotting symbol draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dot plot in 1d using the grid package — points_1d_grid","text":"invisible()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_grid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Dot plot in 1d using the grid package — points_1d_grid","text":"default point size chosen match default graphics","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dot plot in 1d using the grid package — points_1d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Dot plot in 1d using the interactive loon package — points_1d_loon","title":"Dot plot in 1d using the interactive loon package — points_1d_loon","text":"Dot plot 1d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dot plot in 1d using the interactive loon package — points_1d_loon","text":"","code":"points_1d_loon(   zargs,   linkingGroup = NULL,   linkingKey = NULL,   showLabels = FALSE,   showScales = FALSE,   showGuides = FALSE,   glyph = \"ocircle\",   itemLabel = NULL,   showItemLabels = TRUE,   parent = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dot plot in 1d using the interactive loon package — points_1d_loon","text":"zargs argument list passed zenplot() linkingGroup string specifying initial group plots linked plot linkingKey List IDs link showLabels Logical determining whether axis labels displayed showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed glyph plot glyph itemLabel vector strings serve item labels showItemLabels Logical determing whether item labels display mouse hover parent tk parent loon plot widget ... Additional parameters passed loon::l_plot()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dot plot in 1d using the interactive loon package — points_1d_loon","text":"loon loon::l_plot(...)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_1d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dot plot in 1d using the interactive loon package — points_1d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Point plot in 2d using R's base graphics — points_2d_graphics","title":"Point plot in 2d using R's base graphics — points_2d_graphics","text":"Point plot 2d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Point plot in 2d using R's base graphics — points_2d_graphics","text":"","code":"points_2d_graphics(   zargs,   cex = 0.4,   box = FALSE,   add = FALSE,   group... = NULL,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Point plot in 2d using R's base graphics — points_2d_graphics","text":"zargs argument list passed zenplot() cex character expansion factor box logical indicating whether box drawn add logical indicating whether plot added last one group... list arguments passed group_2d_graphics (NULL) plot... additional arguments passed plot_region() ... additional arguments passed points()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Point plot in 2d using R's base graphics — points_2d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Point plot in 2d using R's base graphics — points_2d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Point plot in 2d using the grid package — points_2d_grid","title":"Point plot in 2d using the grid package — points_2d_grid","text":"Point plot 2d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Point plot in 2d using the grid package — points_2d_grid","text":"","code":"points_2d_grid(   zargs,   type = c(\"p\", \"l\", \"o\"),   pch = NULL,   size = 0.02,   box = FALSE,   box.width = 1,   box.height = 1,   group... = list(cex = 0.66),   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Point plot in 2d using the grid package — points_2d_grid","text":"zargs argument list passed zenplot() type line type pch plot symbol size size plot symbol box logical indicating whether box drawn box.width width box box.height height box group... list arguments passed group_2d_grid (NULL) draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Point plot in 2d using the grid package — points_2d_grid","text":"grob (invisibly)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_grid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Point plot in 2d using the grid package — points_2d_grid","text":"- use names depending 'type' since otherwise, one calls         'p' 'l', one plotted       - default point size chosen match default graphics","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Point plot in 2d using the grid package — points_2d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Point plot in 2d using the interactive loon package — points_2d_loon","title":"Point plot in 2d using the interactive loon package — points_2d_loon","text":"Point plot 2d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Point plot in 2d using the interactive loon package — points_2d_loon","text":"","code":"points_2d_loon(   zargs,   showLabels = FALSE,   showScales = FALSE,   showGuides = FALSE,   linkingGroup = NULL,   linkingKey = NULL,   glyph = \"ocircle\",   itemLabel = NULL,   showItemLabels = TRUE,   parent = NULL,   group... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Point plot in 2d using the interactive loon package — points_2d_loon","text":"zargs argument list passed zenplot() showLabels Logical determining whether axis labels displayed showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed linkingGroup initial linking group linkingKey List IDs link glyph String determining glyph type displayed points, default open circle: \"ocircle\" itemLabel vector strings serve item label showItemLabels Logical determing whether item labels display mouse hover parent tk parent loon plot widget group... list arguments passed group_2d_loon (NULL) ... Additional arguments passed loon::l_plot()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Point plot in 2d using the interactive loon package — points_2d_loon","text":"loon plot","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/points_2d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Point plot in 2d using the interactive loon package — points_2d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/qq_2d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile-quantile plot in 2d using R's base graphics — qq_2d_graphics","title":"Quantile-quantile plot in 2d using R's base graphics — qq_2d_graphics","text":"Quantile-quantile plot 2d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/qq_2d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile-quantile plot in 2d using R's base graphics — qq_2d_graphics","text":"","code":"qq_2d_graphics(   zargs,   do.line = TRUE,   lines... = NULL,   cex = 0.4,   box = FALSE,   add = FALSE,   group... = NULL,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/qq_2d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile-quantile plot in 2d using R's base graphics — qq_2d_graphics","text":"zargs argument list passed zenplot() .line logical indicating whether line drawn (empirical c(0.25, 0.75)-quantiles) lines... additional arguments passed lines() cex character expansion factor box logical indicating whether box drawn add logical indicating whether plot added last one group... list arguments passed group_2d_graphics (NULL) plot... additional arguments passed plot_region() ... additional arguments passed qqplot()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/qq_2d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile-quantile plot in 2d using R's base graphics — qq_2d_graphics","text":"invisible()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/qq_2d_graphics.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Quantile-quantile plot in 2d using R's base graphics — qq_2d_graphics","text":"line iff margins *type*","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/qq_2d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quantile-quantile plot in 2d using R's base graphics — qq_2d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/qq_2d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile-quantile plot in 2d using the grid package — qq_2d_grid","title":"Quantile-quantile plot in 2d using the grid package — qq_2d_grid","text":"Quantile-quantile plot 2d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/qq_2d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile-quantile plot in 2d using the grid package — qq_2d_grid","text":"","code":"qq_2d_grid(   zargs,   do.line = TRUE,   lines... = NULL,   pch = NULL,   size = 0.02,   box = FALSE,   box.width = 1,   box.height = 1,   group... = list(cex = 0.66),   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/qq_2d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile-quantile plot in 2d using the grid package — qq_2d_grid","text":"zargs argument list passed zenplot() .line logical indicating whether line drawn (empirical c(0.25, 0.75)-quantiles) lines... additional arguments passed lines() pch plot symbol size size plot symbol box logical indicating whether box drawn box.width width box box.height height box group... list arguments passed group_2d_grid (NULL) draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/qq_2d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile-quantile plot in 2d using the grid package — qq_2d_grid","text":"grob (invisibly)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/qq_2d_grid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Quantile-quantile plot in 2d using the grid package — qq_2d_grid","text":"- line iff margins *type*       - default point size chosen match default graphics","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/qq_2d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quantile-quantile plot in 2d using the grid package — qq_2d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Rectangle plot in 1d using R's base graphics — rect_1d_graphics","title":"Rectangle plot in 1d using R's base graphics — rect_1d_graphics","text":"Rectangle plot 1d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rectangle plot in 1d using R's base graphics — rect_1d_graphics","text":"","code":"rect_1d_graphics(   zargs,   loc = c(0.5, 0.5),   width = 1,   height = 1,   add = FALSE,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rectangle plot in 1d using R's base graphics — rect_1d_graphics","text":"zargs argument list passed zenplot() loc (x,y)-location [0,1]^2; 0 corresponds left, 1 right (direction path) width width rectangle (viewed walking direction) height height rectangle (viewed walking direction) add logical indicating whether plot added last one plot... additional arguments passed plot_region() ... additional arguments passed lines()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rectangle plot in 1d using R's base graphics — rect_1d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rectangle plot in 1d using R's base graphics — rect_1d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Rectangle plot in 1d using the grid package — rect_1d_grid","title":"Rectangle plot in 1d using the grid package — rect_1d_grid","text":"Rectangle plot 1d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rectangle plot in 1d using the grid package — rect_1d_grid","text":"","code":"rect_1d_grid(   zargs,   loc = c(0.5, 0.5),   width = 1,   height = 1,   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rectangle plot in 1d using the grid package — rect_1d_grid","text":"zargs argument list passed zenplot() loc (x,y)-location rectangle width width rectangle (viewed walking direction) height height rectangle (viewed walking direction) draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rectangle plot in 1d using the grid package — rect_1d_grid","text":"grob (invisibly)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rectangle plot in 1d using the grid package — rect_1d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Rectangle plot in 1d using the interactive loon package — rect_1d_loon","title":"Rectangle plot in 1d using the interactive loon package — rect_1d_loon","text":"Rectangle plot 1d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rectangle plot in 1d using the interactive loon package — rect_1d_loon","text":"","code":"rect_1d_loon(   zargs,   loc.x = NULL,   loc.y = NULL,   color = NULL,   fill = NULL,   lwd = 1,   linkingGroup = NULL,   showLabels = FALSE,   showScales = FALSE,   showGuides = FALSE,   baseplot = NULL,   parent = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rectangle plot in 1d using the interactive loon package — rect_1d_loon","text":"zargs argument list passed zenplot() loc.x x-location rectangle loc.y y-location rectangle color Colour rectangle outline fill Colour rectangle interior lwd line width rectangle outline linkingGroup string specifying initial group plots linked plot (ignored) showLabels Logical determining whether axis labels displayed showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed baseplot non-NULL base plot plot layered parent tk parent loon plot widget ... Additional parameters passed loon::l_layer_text(...)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rectangle plot in 1d using the interactive loon package — rect_1d_loon","text":"loon loon::l_plot(...)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_1d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rectangle plot in 1d using the interactive loon package — rect_1d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Rectangle plot in 2d using R's base graphics — rect_2d_graphics","title":"Rectangle plot in 2d using R's base graphics — rect_2d_graphics","text":"Rectangle plot 2d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rectangle plot in 2d using R's base graphics — rect_2d_graphics","text":"","code":"rect_2d_graphics(   zargs,   loc = c(0.5, 0.5),   width = 1,   height = 1,   add = FALSE,   group... = NULL,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rectangle plot in 2d using R's base graphics — rect_2d_graphics","text":"zargs argument list passed zenplot() loc (x,y)-location ((0,1)^2) center rectangle width width rectangle fraction 1 height height rectangle fraction 1 add logical indicating whether plot added last one group... list arguments passed group_2d_graphics (NULL) plot... additional arguments passed plot_region() ... additional arguments passed rect()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rectangle plot in 2d using R's base graphics — rect_2d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rectangle plot in 2d using R's base graphics — rect_2d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Rectangle plot in 2d using the grid package — rect_2d_grid","title":"Rectangle plot in 2d using the grid package — rect_2d_grid","text":"Rectangle plot 2d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rectangle plot in 2d using the grid package — rect_2d_grid","text":"","code":"rect_2d_grid(   zargs,   loc = c(0.5, 0.5),   width = 1,   height = 1,   group... = list(cex = 0.66),   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rectangle plot in 2d using the grid package — rect_2d_grid","text":"zargs argument list passed zenplot() loc (x,y)-location rectangle width rectangle width fraction 1 height rectangle height fraction 1 group... list arguments passed group_2d_grid (NULL) draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rectangle plot in 2d using the grid package — rect_2d_grid","text":"grob (invisibly)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rectangle plot in 2d using the grid package — rect_2d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Rectangle plot in 2d using the interactive loon package — rect_2d_loon","title":"Rectangle plot in 2d using the interactive loon package — rect_2d_loon","text":"Rectangle plot 2d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rectangle plot in 2d using the interactive loon package — rect_2d_loon","text":"","code":"rect_2d_loon(   zargs,   loc.x = NULL,   loc.y = NULL,   color = NULL,   fill = NULL,   lwd = 1,   linkingGroup = NULL,   showLabels = FALSE,   showScales = FALSE,   showGuides = FALSE,   baseplot = NULL,   parent = NULL,   group... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rectangle plot in 2d using the interactive loon package — rect_2d_loon","text":"zargs argument list passed zenplot() loc.x x-location rectangle loc.y y-location rectangle color Colour rectangle outline fill Colour rectangle interior lwd line width rectangle outline linkingGroup initial linking group (ignored) showLabels Logical determining whether axis labels displayed showScales Logical determining whether scales displayed showGuides Logical determining whether background guidelines displayed baseplot non-null base plot plot layered parent tk parent loon plot widget group... list arguments passed group_2d_loon (NULL) ... Additional parameters passed loon::l_layer_text(...)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rectangle plot in 2d using the interactive loon package — rect_2d_loon","text":"base loon::l_plot added text layer","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/rect_2d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rectangle plot in 2d using the interactive loon package — rect_2d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_graphics.html","id":null,"dir":"Reference","previous_headings":"","what":"Rug plot in 1d using R's base graphics — rug_1d_graphics","title":"Rug plot in 1d using R's base graphics — rug_1d_graphics","text":"Rug plot 1d using R's base graphics","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_graphics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rug plot in 1d using R's base graphics — rug_1d_graphics","text":"","code":"rug_1d_graphics(   zargs,   loc = 0.5,   length = 0.5,   width = 1,   col = par(\"fg\"),   add = FALSE,   plot... = NULL,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_graphics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rug plot in 1d using R's base graphics — rug_1d_graphics","text":"zargs argument list passed zenplot() loc location [0,1]; 0 corresponds left, 1 right (direction path) length length rugs width line width rugs col color rugs add logical indicating whether plot added last one plot... additional arguments passed plot_region() ... additional arguments passed segments()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_graphics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rug plot in 1d using R's base graphics — rug_1d_graphics","text":"invisible()","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_graphics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rug plot in 1d using R's base graphics — rug_1d_graphics","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Rug plot in 1d using the grid package — rug_1d_grid","title":"Rug plot in 1d using the grid package — rug_1d_grid","text":"Rug plot 1d using grid package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rug plot in 1d using the grid package — rug_1d_grid","text":"","code":"rug_1d_grid(   zargs,   loc = 0.5,   length = 0.5,   width = 0.001,   col = par(\"fg\"),   draw = FALSE,   ... )"},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rug plot in 1d using the grid package — rug_1d_grid","text":"zargs argument list passed zenplot() loc location [0,1]; 0 corresponds left, 1 right (direction path) length length rugs width line width rugs col default color rectangles/rugs draw logical indicating whether drawing take place ... additional arguments passed gpar()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rug plot in 1d using the grid package — rug_1d_grid","text":"grob (invisibly)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_grid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rug plot in 1d using the grid package — rug_1d_grid","text":"choice width height leave rugs enough space       touch points (avoid points rugs overplotting).","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rug plot in 1d using the grid package — rug_1d_grid","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_loon.html","id":null,"dir":"Reference","previous_headings":"","what":"Rug plot in 1d using the interactive loon package — rug_1d_loon","title":"Rug plot in 1d using the interactive loon package — rug_1d_loon","text":"Rug plot 1d using interactive loon package","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_loon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rug plot in 1d using the interactive loon package — rug_1d_loon","text":"","code":"rug_1d_loon(zargs, ...)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_loon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rug plot in 1d using the interactive loon package — rug_1d_loon","text":"zargs argument list passed zenplot() ... Additional parameters passed loon::l_plot()","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_loon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rug plot in 1d using the interactive loon package — rug_1d_loon","text":"loon loon::l_plot(...)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_loon.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rug plot in 1d using the interactive loon package — rug_1d_loon","text":"Just calls points_1d_loon glyph = \"osquare\" preserve linking","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/rug_1d_loon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rug plot in 1d using the interactive loon package — rug_1d_loon","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/turn_checker.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the Turns (Number/Type) — turn_checker","title":"Check the Turns (Number/Type) — turn_checker","text":"Check Turns (Number/Type)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/turn_checker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the Turns (Number/Type) — turn_checker","text":"","code":"turn_checker(turns, n2dplots, first1d, last1d)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/turn_checker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the Turns (Number/Type) — turn_checker","text":"turns turns n2dplots number 2d plots first1d logical indicating whether first 1d plot plotted last1d logical indicating whether last 1d plot plotted","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/turn_checker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the Turns (Number/Type) — turn_checker","text":"TRUE (unless fails)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/turn_checker.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check the Turns (Number/Type) — turn_checker","text":"Marius Hofert","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/unfold.html","id":null,"dir":"Reference","previous_headings":"","what":"Unfold the hypercube and produce all information concerning the zenpath and zenplot layout — unfold","title":"Unfold the hypercube and produce all information concerning the zenpath and zenplot layout — unfold","text":"unfold() function imagines pair variables/dimensions \"face\" high dimensional cube. faces \"unfolded\" one 2d space \"face\" next 1d face \"edge\" share.  unfold() function  takes, first argument, nfaces, number 2d plots/spaces \"unfolded\" produces zenpath zenplot layout required function zenplot().  Laying pairs zenplot alluded \"unfolding\" (least part ) high dimensional space.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/unfold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unfold the hypercube and produce all information concerning the zenpath and zenplot layout — unfold","text":"","code":"unfold(nfaces, turns = NULL,        n2dcols = c(\"letter\", \"square\", \"A4\", \"golden\", \"legal\"),        method = c(\"tidy\", \"double.zigzag\", \"single.zigzag\", \"rectangular\"),        first1d = TRUE, last1d = TRUE, width1d = 1, width2d = 10)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/unfold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unfold the hypercube and produce all information concerning the zenpath and zenplot layout — unfold","text":"nfaces number faces hypercube unfold turns character vector (length two times number variables plotted minus 1) consisting \"d\", \"u\", \"r\" \"l\" indicating turns current plot position; NULL, turns constructed. n2dcols number columns 2d plots (\\(\\ge 1\\)) one \"letter\", \"square\", \"A4\", \"golden\" \"legal\" case similar layout constructed. Note n2dcols ignored !.null(turns). method type zigzag plot (character). Available : tidy: tidied-double.zigzag          (slightly compact placement plots towards end). double.zigzag: zigzag plot form         flipped “S”. Along path, plots         placed form “S” rotated         counterclockwise 90 degrees. single.zigzag: zigzag plot form         flipped “S”. rectangular: plots fill page         left right top bottom. useful (compact)         plots share axis. Note method ignored turns provided. first1d logical indicating whether first one-dimensional (1d) plot plotted. last1d logical indicating whether last one-dimensional (1d) plot plotted width1d graphical parameter > 0 giving width 1d plots. width2d graphical parameter > 0 giving width 2d plots.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/unfold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unfold the hypercube and produce all information concerning the zenpath and zenplot layout — unfold","text":"list describing unfolded path layout  list named components: path: path unfolding, given     structured list components turns: sequence turns      – one “l” (left), “r” (right),     “d” (), “u”  () –     required move current plot location display next along     unfolded path. positions: path matrix (x, y) positions giving      indices occupancy matrix plot path. occupancy: rectangular array whose cells indicate positions     plots page.  layout: details visual layout plots given     structured list components orientations: vector indicating orientation     displays order – “h” horizontal, “v” vertical,     “s” square. dimensions: vector giving dimensionality     plot order. vars: matrix variable indices used plot – x     horizontal variable y vertical. layoutWidth: positive integer giving display width     2d plot. layoutHeight: positive integer giving display height     2d plot. boundingBoxes: matrix 4 columns giving locations (left,     right, bottom, top) box bound     plots order.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/unfold.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Unfold the hypercube and produce all information concerning the zenpath and zenplot layout — unfold","text":"Although unfold() probably rather rarely used directly user,  provides insight zenplots constructed.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/unfold.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Unfold the hypercube and produce all information concerning the zenpath and zenplot layout — unfold","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/unfold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unfold the hypercube and produce all information concerning the zenpath and zenplot layout — unfold","text":"","code":"dim <- 20 unfolding <- unfold(nfaces = dim -1) names(unfolding) #> [1] \"path\"   \"layout\""},{"path":"https://great-northern-diver.github.io/zenplots/reference/vport.html","id":null,"dir":"Reference","previous_headings":"","what":"Viewport Constructing Function for Grid Functions — vport","title":"Viewport Constructing Function for Grid Functions — vport","text":"Auxiliary function constructing viewports 1d 2d (default) plots.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/vport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Viewport Constructing Function for Grid Functions — vport","text":"","code":"vport(ispace, xlim = NULL, ylim = NULL, x = NULL, y = NULL, ...)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/vport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Viewport Constructing Function for Grid Functions — vport","text":"ispace inner space (\\([0,1]\\))) xlim x-axis limits;  NULL, data limits used. ylim y-axis limits;  NULL, data limits used. x x data (used .null(xlim)); NULL, 0:1 used. y y data (used .null(ylim)); NULL, 0:1 used. ... additional arguments passed underlying viewport().","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/vport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Viewport Constructing Function for Grid Functions — vport","text":"viewport.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/vport.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Viewport Constructing Function for Grid Functions — vport","text":"auxiliary function used provided grid-related 1d 2d plots.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/vport.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Viewport Constructing Function for Grid Functions — vport","text":"Ideas dataViewport() extendrange()       Omitted check:       (length(ispace) != 4) ispace <- rep(ispace, length.= 4)       stopifnot(0 <= ispace, ispace <= 1)","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/vport.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Viewport Constructing Function for Grid Functions — vport","text":"Marius Hofert","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/wine.html","id":null,"dir":"Reference","previous_headings":"","what":"Wine Data Set — wine","title":"Wine Data Set — wine","text":"Data set consisting 178 rows 27 columns containing data   wine Piedmont region Italy.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/wine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wine Data Set — wine","text":"","code":"data(\"wine\")"},{"path":"https://great-northern-diver.github.io/zenplots/reference/wine.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wine Data Set — wine","text":"data.frame() 27 columns: wine: wine name (categorical variable       levels Barbera, Barolo, Grignolino). alcohol: alcohol percentage (numeric). sugar: sugar-free extract (numeric). acidity: fixed acidity (numeric). tartaric: tartaric acid (numeric). malic: malic acid (numeric). uronic: uronic acids (numeric). pH: pH (numeric). ash: ash (numeric). alcal_ash: alcalinity ash (numeric). potassium: potassium (numeric). calcium: calcium (numeric). magnesium: magnesium (numeric). phosphate: phosphate (numeric). cloride: chloride (numeric). phenols: total phenols (numeric). flavanoids: flavanoids (numeric). nonflavanoids: nonflavanoid phenols (numeric). proanthocyanins: proanthocyanins (numeric). colour: colour intensity (numeric). hue: hue (numeric). OD_dw: \\(OD_{280}/OD_{315}\\)       diluted wines (numeric). OD_fl: \\(OD_{280}/OD_{315}\\)       flavanoids (numeric). glycerol: glycerol (numeric). butanediol: 2,3-butanediol (numeric). nitrogen: total nitrogen (numeric). proline: proline (numeric). methanol: methanol (numeric).","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/wine.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Wine Data Set — wine","text":"data set obtained R\\ package sn (  convenience). represent chemical measurements 178 wine specimens   belonging three types wine produced Piedmont region Italy.   data set includes variables listed Forina et al.   (1986) exception ‘Sulphate’. first variable   categorial, others numeric. Forina, M., Lanteri, S. Armanino, C., Casolino, C., Casale, M. Oliveri, P.   V-PARVUS 2008: extendible package programs esplorative   data analysis, classification regression analysis.   Dip. Chimica e Tecnologie Farmaceutiche ed Alimentari,   Università di Genova, Italia. Web-site (accessible 2014):   http://www.parvus.unige.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/wine.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Wine Data Set — wine","text":"Forina M., Armanino C., Castino M. Ubigli M. (1986).   Multivariate data analysis discriminating method origin wines.   Vitis 25, 189–201.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/wine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wine Data Set — wine","text":"","code":"data(\"wine\")"},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenarrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Defining an arrow — zenarrow","title":"Defining an arrow — zenarrow","text":"Defining arrow","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenarrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defining an arrow — zenarrow","text":"","code":"zenarrow(turn, angle = 80, length = 1, coord.scale = 1)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenarrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defining an arrow — zenarrow","text":"turn direction arrow point (\"l\", \"r\", \"d\", \"u\") angle angle length length arrow [0,1] tip base coord.scale Scale coordinates arrow","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenarrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defining an arrow — zenarrow","text":"3-column matrix containing (x,y) coordinates left         edge end point, arrow head right edge end point","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenarrow.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Defining an arrow — zenarrow","text":"Marius Hofert","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenpath.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a Path of Indices to Order Variables — zenpath","title":"Construct a Path of Indices to Order Variables — zenpath","text":"Constructing zenpaths tools extracting, connecting displaying pairs, well grouping indexing data structures.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenpath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a Path of Indices to Order Variables — zenpath","text":"","code":"zenpath(x, pairs = NULL,         method = c(\"front.loaded\", \"back.loaded\",                    \"balanced\", \"eulerian.cross\",                    \"greedy.weighted\", \"strictly.weighted\"),         decreasing = TRUE)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenpath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a Path of Indices to Order Variables — zenpath","text":"x method pairs two-column matrix containing (row-wise) pairs connected variables sorted according weights. Note resulting graph must connected (.e. variable can reached variable following connections given pairs). pairs argument used methods greedy.weighted strictly.weighted can NULL (case default constructed lexicographical order). method character string indicating sorting method used. Available methods : \"front.loaded\": Sort pairs first variables appear                        frequently early sequence;                        Eulerian path; note might slightly                        longer number pairs , first, even                        graph made. \"back.loaded\": Sort pairs later variables appear                       frequently later sequence;                       Eulerian path (+ see front.loaded concerning length) \"balanced\": Sort pairs variables appear                    balanced blocks throughout sequence                    (Hamiltonian Decomposition; Eulerian, ). \"eulerian.cross\": Generate sequence pairs                          formed one variable group. \"greedy.weighted\": Sort pairs according greedy (heuristic)                             Euler path x weights visiting                             edge precisely . \"strictly.weighted\": Strictly respect order weights - first, second,         third, , adjacent pair numbers output         zenpath() corresponds pair largest,         second-largest, third-largest, , weight. decreasing logical indicating whether sorting done according increasing decreasing weights.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenpath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a Path of Indices to Order Variables — zenpath","text":"Returns sequence variables (indices names, possibly list ), can used index data (via groupData()plotting via zenplot().","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenpath.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Construct a Path of Indices to Order Variables — zenpath","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenpath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a Path of Indices to Order Variables — zenpath","text":"","code":"## Some calls of zenpath() zenpath(10) # integer argument #>  [1]  1  2  3  1  4  2  5  1  6  2  7  1  8  2  9  1 10  2  3  4  5  3  6  4  7 #> [26]  3  8  4  9  3 10  4  5  6  7  5  8  6  9  5 10  6  7  8  9  7 10  8  9 10 ## Note that the result is of length 50 > 10 choose 2 as the underlying graph has to ## be even (and thus edges are added here) (zp <- zenpath(c(3, 5), method = \"eulerian.cross\")) # integer(2) argument #>  [1] 1 4 2 5 1 6 2 7 1 8 3 4 3 6 7 3 5 8 2"},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function to create a zenplot — zenplot","title":"Main function to create a zenplot — zenplot","text":"Constructs draws zigzag expanded navigation plot graphical exploratory analysis path variables.  result alternating sequence one-dimensional (1d) two-dimensional (2d) plots laid zigzag-like structure consecutive pair 2d plots one variates (coordinates) common 1d plot appearing .","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function to create a zenplot — zenplot","text":"","code":"zenplot(x, turns = NULL,         first1d = TRUE, last1d = TRUE,         n2dcols = c(\"letter\", \"square\", \"A4\", \"golden\", \"legal\"),         n2dplots = NULL,         plot1d = c(\"label\", \"points\", \"jitter\", \"density\", \"boxplot\", \"hist\",                    \"rug\", \"arrow\", \"rect\", \"lines\", \"layout\"),         plot2d = c(\"points\", \"density\", \"axes\", \"label\", \"arrow\", \"rect\", \"layout\"),         zargs = c(x = TRUE, turns = TRUE, orientations = TRUE,                   vars = TRUE, num = TRUE, lim = TRUE, labs = TRUE,                   width1d = TRUE, width2d = TRUE,                   ispace = match.arg(pkg) != \"graphics\"),         lim = c(\"individual\", \"groupwise\", \"global\"),         labs = list(group = \"G\", var = \"V\", sep = \", \", group2d = FALSE),         pkg = c(\"graphics\", \"grid\", \"loon\"),         method = c(\"tidy\", \"double.zigzag\", \"single.zigzag\", \"rectangular\"),         width1d = if(is.null(plot1d)) 0.5 else 1,         width2d = 10,         ospace = if(pkg == \"loon\") 0 else 0.02,         ispace = if(pkg == \"graphics\") 0 else 0.037,         draw = TRUE,         ...)"},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function to create a zenplot — zenplot","text":"x data object \"standard forms\", vector, matrix, data.frame, list . case list, components x interpreted groups data visually separated two-dimensional (group) plot. turns character vector (length two times number variables plotted minus 1) consisting \"d\", \"u\", \"r\" \"l\" indicating turns current plot position; NULL, turns constructed (x \"standard form\" described ). first1d logical indicating whether first one-dimensional plot included. last1d logical indicating whether last one-dimensional plot included. n2dcols number columns 2d plots (\\(\\ge 1\\)) one \"letter\", \"square\", \"A4\", \"golden\" \"legal\" case similar layout constructed. Note n2dcols ignored !.null(turns). n2dplots number 2d plots. plot1d function use return        one-dimensional plot constructed package pkg.        Alternatively, character string existing        function.        defaults provided, corresponding functions        obtained appending _1d_graphics, _1d_grid        _1d_loon depending pkg used. plot1d = NULL, 1d plot produced zenplot. plot2d function returning two-dimensional plot        constructed package pkg.        Alternatively, character string existing        function. defaults provided, corresponding functions        obtained appending _2d_graphics, _2d_grid        _2d_loon depending pkg used. plot1d, plot2d omits 2d plots plot2d = NULL. zargs fully named logical vector        indicating whether respective arguments (possibly) passed        plot1d() plot2d() (latter contain        formal argument zargs, typically /,        see example ). zargs can maximally contain variables given default.        one variables appear zargs,        treated TRUE corresponding arguments passed        plot1d plot2d. one set        FALSE, argument passed . lim (x-/y-)axis limits. can character string        numeric(2). lim = \"groupwise\" x contain groups,        behaviour equivalent lim = \"global\". labs plot labels used; see argument labs burst() exact specification. labs can, general, anything long plot1d plot2d know deal . pkg R package used plotting (depends functions plot1d plot2d constructed; user responsible choosing appropriate package among supported ones). method type zigzag plot (character). Available : tidy: tidied-double.zigzag                 (slightly compact placement plots towards end). double.zigzag: zigzag plot form                flipped “S”. Along path, plots                placed form “S” rotated                counterclockwise 90 degrees. single.zigzag: zigzag plot form                flipped “S”. rectangular: plots fill page                left right top bottom. useful (compact)                plots share axis. Note method ignored turns provided. width1d graphical parameter > 0 giving width 1d plots. width2d graphical parameter > 0 giving height 2d plots. ospace outer space around zenplot.   vector        length four (bottom, left, top, right),        one whose values repeated length four,        gives outer space device region        inner plot region around zenplot. Values \\([0,1]\\)  pkg \"graphics\"        \"grid\", number pixels whenpkg \"loon\". ispace inner space \\([0,1]\\) figure region region (1d/2d) plot contains. , vector length four (bottom, left, top, right) shorter one whose values repeated produce vector length four. draw logical indicating whether zenplot immediately displayed (default) . ... arguments passed drawing functions plot1d plot2d. need pass certain arguments one , say, plot2d, consider providing plot2d; see examples .","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function to create a zenplot — zenplot","text":"(besides plotting) invisibly returns list additional classnames        marking zenplot zenPkg object (Pkg one Graphics,        Grid, Loon, identify        package used construct plot). list contains least        path layout (see unfold details). Depending graphics package pkg used, returned list        includes additional components.  pkg = \"grid\",        whole plot grob (grid object).        pkg = \"loon\",  whole plot        loon plot object        well toplevel tk object plot appears.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Main function to create a zenplot — zenplot","text":"Marius Hofert Wayne Oldford","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main function to create a zenplot — zenplot","text":"","code":"### Basics #####################################################################  ## Generate some data n <- 1000 # sample size d <- 20 # dimension set.seed(271) # set seed (for reproducibility) x <- matrix(rnorm(n * d), ncol = d) # i.i.d. N(0,1) data  ## A basic zenplot res <- zenplot(x)  uf <- unfold(nfaces = d - 1) ## `res` and `uf` is not identical as `res` has specific ## class attributes. for(name in names(uf)) {   stopifnot(identical(res[[name]], uf[[name]])) }  ## => The return value of zenplot() is the underlying unfold()  ## Some missing data z <- x z[seq_len(n-10), 5] <- NA # all NA except 10 points zenplot(z)   ## Another column with fully missing data (use arrows) ## Note: This could be more 'compactified', but is technically ##       more involved z[, 6] <- NA # all NA zenplot(z)   ## Lists of vectors, matrices and data frames as arguments (=> groups of data) ## Only two vectors z <- list(x[,1], x[,2]) zenplot(z)   ## A matrix and a vector z <- list(x[,1:2], x[,3]) zenplot(z)   ## A matrix, NA column and a vector z <- list(x[,1:2], NA, x[,3]) zenplot(z)  z <- list(x[,1:2], cbind(NA, NA), x[,3]) zenplot(z)  z <- list(x[,1:2], 1:10, x[,3]) zenplot(z)   ## Without labels or with different labels z <- list(A = x[,1:2], B = cbind(NA, NA), C = x[,3]) zenplot(z, labs = NULL) # without any labels  zenplot(z, labs = list(group = NULL, group2d = TRUE)) # without group labels  zenplot(z, labs = list(group = NULL)) # without group labels unless groups change  zenplot(z, labs = list(var = NULL)) # without variable labels  zenplot(z, labs = list(var = \"Variable \", sep = \" - \")) # change default labels   ## Example with a factor zenplot(iris)  zenplot(iris, lim = \"global\") # global scaling of axis  zenplot(iris, lim = \"groupwise\") # acts as 'global' here (no groups in the data)   ### More sophisticated examples ################################################  ## Note: The third component (data.frame) naturally has default labels. ##       zenplot() uses these labels and prepends a default group label. z <- list(x[,1:5], x[1:10, 6:7], NA,           data.frame(x[seq_len(round(n/5)), 8:19]), cbind(NA, NA), x[1:10, 20]) zenplot(z, labs = list(group = \"Group \")) # change the group label (var and sep are defaults)  ## Alternatively, give z labels names(z) <- paste(\"Group\", LETTERS[seq_len(length(z))]) # give group names zenplot(z) # uses given group names  ## Now let's change the variable labels z. <- lapply(z, function(z.) {                      if(!is.matrix(z.)) z. <- as.matrix(z.)                      colnames(z.) <- paste(\"Var.\", seq_len(ncol(z.)))                      z.                      }             ) zenplot(z.)    ### A dynamic plot based on 'loon' (if installed and R compiled with tcl support)  if (FALSE) { # \\dontrun{     if(requireNamespace(\"loon\", quietly = TRUE))         zenplot(x, pkg = \"loon\") } # }   ### Providing your own turns ###################################################  ## A basic example turns <- c(\"l\",\"d\",\"d\",\"r\",\"r\",\"d\",\"d\",\"r\",\"r\",\"u\",\"u\",\"r\",\"r\",\"u\",\"u\",\"l\",\"l\",            \"u\",\"u\",\"l\",\"l\",\"u\",\"u\",\"l\",\"l\",\"d\",\"d\",\"l\",\"l\",\"d\",\"d\",\"l\",\"l\",            \"d\",\"d\",\"r\",\"r\",\"d\",\"d\") zenplot(x, plot1d = \"layout\", plot2d = \"layout\", turns = turns) # layout of plot regions  ## => The tiles stick together as ispace = 0. zenplot(x, plot1d = \"layout\", plot2d = \"layout\", turns = turns,         pkg = \"grid\") # layout of plot regions with grid  ## => Here the tiles show the small (default) ispace  ## Another example (with own turns and groups) zenplot(list(x[,1:3], x[,4:7]), plot1d = \"arrow\", plot2d = \"rect\",         turns = c(\"d\", \"r\", \"r\", \"r\", \"r\", \"d\",                   \"d\", \"l\", \"l\", \"l\", \"l\", \"l\"), last1d = FALSE)    ### Providing your own plot1d() or plot2d() ####################################  ## Creating a box zenplot(x, plot1d = \"label\", plot2d = function(zargs)     density_2d_graphics(zargs, box = TRUE))   ## With grid # \\donttest{     zenplot(x, plot1d = \"label\", plot2d = function(zargs)         density_2d_grid(zargs, box = TRUE), pkg = \"grid\")  # }  ## An example with width1d = width2d and where no zargs are passed on. ## Note: This could have also been done with 'rect_2d_graphics(zargs, col = ...)' ##       as plot1d and plot2d. myrect <- function(...) {     plot(NA, type = \"n\", ann = FALSE, axes = FALSE, xlim = 0:1, ylim = 0:1)     rect(xleft = 0, ybottom = 0, xright = 1, ytop = 1, ...) } zenplot(matrix(0, ncol = 15),         n2dcol = \"square\", width1d = 10, width2d = 10,         plot1d = function(...) myrect(col = \"royalblue3\"),         plot2d = function(...) myrect(col = \"maroon3\"))   ## Colorized rugs as plot1d() basecol <- c(\"royalblue3\", \"darkorange2\", \"maroon3\") palette <- colorRampPalette(basecol, space = \"Lab\") cols <- palette(d) # different color for each 1d plot zenplot(x, plot1d = function(zargs) {               rug_1d_graphics(zargs, col = cols[(zargs$num+1)/2])               }        )   ## With grid library(grid) # for gTree() and gList() # \\donttest{     zenplot(x, pkg = \"grid\", # you are responsible for choosing the right pkg (cannot be tested!)             plot1d = function(zargs)                 rug_1d_grid(zargs, col = cols[(zargs$num+1)/2]))  # }  ## Rectangles with labels as plot2d() (shows how to overlay plots) ## With graphics ## Note: myplot2d() could be written directly in a simpler way, but is ##       based on the two functions here to show how they can be combined. zenplot(x, plot1d = \"arrow\", plot2d = function(zargs) {     rect_2d_graphics(zargs)     label_2d_graphics(zargs, add = TRUE) })   ## With grid # \\donttest{     zenplot(x, pkg = \"grid\", plot1d = \"arrow\", plot2d = function(zargs)         gTree(children = gList(rect_2d_grid(zargs),                                label_2d_grid(zargs))))  # }  ## Rectangles with labels outside the 2d plotting region as plot2d() ## With graphics zenplot(x, plot1d = \"arrow\", plot2d = function(zargs) {     rect_2d_graphics(zargs)     label_2d_graphics(zargs, add = TRUE, xpd = NA, srt = 90,                       loc = c(1.04, 0), adj = c(0,1), cex = 0.7) })   ## With grid # \\donttest{     zenplot(x, pkg = \"grid\", plot1d = \"arrow\", plot2d = function(zargs)         gTree(children = gList(rect_2d_grid(zargs),                                label_2d_grid(zargs, loc = c(1.04, 0),                                              just = c(\"left\", \"top\"),                                              rot = 90, cex = 0.45))))  # }  ## 2d density with points, 1d arrows and labels zenplot(x, plot1d = function(zargs) {     rect_1d_graphics(zargs)     arrow_1d_graphics(zargs, add = TRUE, loc = c(0.2, 0.5))     label_1d_graphics(zargs, add = TRUE, loc = c(0.8, 0.5)) }, plot2d = function(zargs) {     points_2d_graphics(zargs, col = adjustcolor(\"black\", alpha.f = 0.4))     density_2d_graphics(zargs, add = TRUE) })   ## 2d density with labels, 1d histogram with density and label ## Note: The 1d plots are *improper* overlays here as the density ##       plot does not know the heights of the histogram. In other ##       words, both histograms and densities use the whole 1d plot ##       region but are not correct relative to each other in the ##       sense of covering the same are. For a *proper* overlay ##       see below. zenplot(x,     plot1d = function(zargs) {                     hist_1d_graphics(zargs)                     density_1d_graphics(zargs, add = TRUE,                                         border = \"royalblue3\",                                         lwd = 1.4)                     label_1d_graphics(zargs, add = TRUE,                                       loc = c(0.2, 0.8),                                       cex = 0.6, font = 2,                                       col = \"darkorange2\")                     },     plot2d = function(zargs) {                     density_2d_graphics(zargs)                     points_2d_graphics(zargs, add = TRUE,                                        col = adjustcolor(\"black\", alpha.f = 0.3))                                 }             )    ### More sophisticated examples ################################################  ### Example: Overlaying histograms with densities (the *proper* way) # \\donttest{ ## Define proper 1d plot for overlaying histograms with densities hist_with_density_1d <- function(zargs) { ## Extract information and data num <- zargs$num # plot number (among all 1d and 2d plots) turn.out <- zargs$turns[num] # turn out of current position horizontal <- turn.out == \"d\" || turn.out == \"u\" # the indices of the 'x' variable to be displayed in the current plot ii <- plot_indices(zargs) label <- paste0(\"V\", ii[1]) # label srt <- if(horizontal) 0 else if(turn.out == \"r\") -90 else 90 # label rotation x <- zargs$x[,ii[1]] # data lim <- range(x) # data limits ## Compute histogram information breaks <- seq(from = lim[1], to = lim[2], length.out = 21) binInfo <- hist(x, breaks = breaks, plot = FALSE) binBoundaries <- binInfo$breaks widths <- diff(binBoundaries) heights <- binInfo$density ## Compute density information dens <- density(x) xvals <- dens$x keepers <- (min(x) <= xvals) & (xvals <= max(x)) # keep those within the range of the data x. <- xvals[keepers] y. <- dens$y[keepers] ## Determine plot limits and data if(turn.out == \"d\" || turn.out == \"l\") { # flip density/histogram     heights <- -heights     y. <- -y. } if(horizontal) {     xlim <- lim     xlim.bp <- xlim - xlim[1] # special for barplot(); need to shift the bars     ylim <- range(0, heights, y.)     ylim.bp <- ylim     x <- c(xlim[1], x., xlim[2]) - xlim[1] # shift due to plot region set up by barplot()     y <- c(0, y., 0) } else {     xlim <- range(0, heights, y.)     xlim.bp <- xlim     ylim <- lim     ylim.bp <- ylim - ylim[1] # special for barplot(); need to shift the bars     x <-  c(0, y., 0)     y <- c(xlim[1], x., xlim[2]) - ylim[1] # shift due to plot region set up by barplot() } ## Determining label position relative to the zenpath loc <- c(0.1, 0.6)  # when walking downwards, change both left/right and up/down if(turn.out == \"d\") loc <- 1-loc  # when walking to the right, coordinates change and 2nd is flipped if(turn.out == \"r\") {     loc <- rev(loc)     loc[2] <- 1-loc[2] }  # when walking to the left, coordinates change and 1st is flipped if(turn.out == \"l\") {     loc <- rev(loc)     loc[1] <- 1-loc[1] } ## Plotting barplot(heights, width = widths, xlim = xlim.bp, ylim = ylim.bp,         space = 0, horiz = !horizontal, main = \"\", xlab = \"\", axes = FALSE) # histogram polygon(x = x, y = y, border = \"royalblue3\", lwd = 1.4) # density opar <- par(usr = c(0, 1, 0, 1)) # switch to relative coordinates for text on.exit(par(opar)) text(x = loc[1], y = loc[2], labels = label, cex = 0.7, srt = srt, font = 2,      col = \"darkorange2\") # label     }  ## Zenplot zenplot(x, plot1d = \"hist_with_density_1d\", plot2d = function(zargs) {        density_2d_graphics(zargs)        points_2d_graphics(zargs,                           add = TRUE,                           col = adjustcolor(\"black\", alpha.f = 0.3)) } ) #> Error in zenplot(x, plot1d = \"hist_with_density_1d\", plot2d = function(zargs) {    density_2d_graphics(zargs)    points_2d_graphics(zargs, add = TRUE, col = adjustcolor(\"black\",         alpha.f = 0.3))}): Function provided as argument 'plot1d' does not exist. # }  ### Example: A path through pairs of a grouped t copula sample  # \\donttest{ ## 1) Build a random sample from a 17-dimensional grouped t copula d. <- c(8, 5, 4) # sector dimensions d <- sum(d.) # total dimension nu <- rep(c(12, 1, 0.25), times = d.) # d.o.f. for each dimension n <- 500 # sample size set.seed(271) Z <- matrix(rnorm(n * d), ncol = n) # (d,n)-matrix P <- matrix(0.5, nrow = d, ncol = d) diag(P) <- 1 L <- t(chol(P))   # L: LL^T = P Y <- t(L %*% Z) # (n,d)-matrix containing n d-vectors following N(0,P) U. <- runif(n) W <- sapply(nu, function(nu.) 1/qgamma(U., shape = nu./2, rate = nu./2)) # (n,d)-matrix X <- sqrt(W) * Y # (n,d)-matrix U <- sapply(1:d, function(j) pt(X[,j], df = nu[j])) # (n,d)-matrix  ## 2) Plot the data with a pairs plot, colorizing the groups cols <- matrix(\"black\", nrow = d, ncol = d) # colors start <- c(1, cumsum(head(d., n = -1))+1) # block start indices end <- cumsum(d.) # block end indices for(j in seq_along(d.)) cols[start[j]:end[j], start[j]:end[j]] <- basecol[j] # colors diag(cols) <- NA # remove colors corresponding to diagonal entries cols <- as.vector(cols) # convert to a vector cols <- cols[!is.na(cols)] # remove NA entries corresponding to diagonal count <- 0 # panel number my_panel <- function(x, y, ...) # panel function for colorizing groups              { count <<- count + 1; points(x, y, pch = \".\", col = cols[count]) } pairs(U, panel = my_panel, gap = 0,      labels = as.expression( sapply(1:d, function(j) bquote(italic(U[.(j)]))) ))   ## 3) Zenplot of a random path through all pairs, colorizing the respective group ## Define our own points_2d_grid() for colorizing the groups my_points_2d_grid <- function(zargs, basecol, d.) {        r <- extract_2d(zargs) # extract information from zargs        x <- r$x        y <- r$y        xlim <- r$xlim        ylim <- r$ylim        num2d <- zargs$num/2        vars <- as.numeric(r$vlabs[num2d:(num2d+1)]) # two variables to be plotted        ## Alternatively, we could have used ord[r$vars[num2d:(num2d+1)]] with        ## the order 'ord' (see below) being passed to my_points_2d_grid()        col <- if(all(1 <= vars & vars <= d.[1])) { basecol[1] } else {            if(all(d.[1]+1 <= vars & vars <= d.[1]+d.[2])) { basecol[2] } else {                if(all(d.[1]+d.[2]+1 <= vars & vars <= d)) basecol[3] else \"black\"            }        } # determine the colors        vp <- vport(zargs$ispace, xlim = xlim, ylim = ylim, x = x, y = y) # viewport        pointsGrob(x = x[[1]], y = y[[1]], pch = 21, size = unit(0.02, units = \"npc\"),                   name = \"points_2d\", gp = gpar(col = col), vp = vp)    } ## Plot a random permutation of columns via a zenplot ## Note: We set column labels here, as otherwise the labels can only ##       show *indices* of the variables to be plotted, i.e., the column ##       number in U[,ord], and not the original column number in U (which ##       is what we want to see in order to see how our 'path' through ##       the pairs of variables looks like). colnames(U) <- 1:d set.seed(1) (ord <- sample(1:d, size = d)) # path; 1:d would walk parallel to the secondary diagonal #>  [1]  4  7  1  2 13 16 11 14  3 15  5 12 10  6 17  9  8 zenplot(U[,ord], plot1d = \"layout\", plot2d = \"layout\", pkg = \"grid\") # layout  zenplot(U[,ord], # has correct variable names as column names         pkg = \"grid\",         plot1d = function(zargs) arrow_1d_grid(zargs, col = \"grey50\"),         plot2d = function(zargs)                gTree(children = gList(                    my_points_2d_grid(zargs, basecol = basecol, d. = d.),                    rect_2d_grid(zargs, width = 1.05, height = 1.05,                                 col = \"grey50\", lty = 3),                    label_2d_grid(zargs, loc = c(1.06, -0.03),                                  just = c(\"left\", \"top\"), rot = 90, cex = 0.45,                                  fontface = \"bold\") )))  ## => The points are colorized correctly (compare with the pairs plot). # }   ### Using ggplot2 ##############################################################  ## Although not thoroughly tested, in principle ggplot2 can also be used via ## pkg = \"grid\" as follows. # \\donttest{ library(ggplot2)  ## Define our own 2d plot my_points_2d_ggplot <- function(zargs, extract2d = TRUE)    {        if(extract2d) {            r <- extract_2d(zargs) # extract results from zargs            df <- data.frame(r$x, r$y) # data frame            names(df) <- c(\"x\", \"y\")            cols <- zargs$x[,\"Species\"]        } else {            ii <- plot_indices(zargs) # the indices of the variables to be plotted            irs <- zargs$x # iris data            df <- data.frame(x = irs[,ii[1]], y = irs[,ii[2]]) # data frame            cols <- irs[,\"Species\"]        }        num2d <- zargs$num/2 # plot number among all 2d plots        p <- ggplot() + geom_point(data = df, aes(x = x, y = y, colour = cols),                                   show.legend = num2d == 3) +            labs(x = \"\", y = \"\") # 2d plot        if(num2d == 3) p <- p + theme(legend.position = \"bottom\", # legend for last 2d plot                                      legend.title = element_blank())        ggplot_gtable(ggplot_build(p)) # 2d plot as grob    }  ## Plotting iris. <- iris colnames(iris.) <- gsub(\"\\\\\\\\.\", \" \", x = colnames(iris)) # => nicer 1d labels zenplot(iris., n2dplots = 3, plot2d = \"my_points_2d_ggplot\", pkg = \"grid\") #> Error in zenplot(iris., n2dplots = 3, plot2d = \"my_points_2d_ggplot\",     pkg = \"grid\"): Function provided as argument 'plot2d' does not exist. zenplot(iris., n2dplots = 3,         plot2d = function(zargs) my_points_2d_ggplot(zargs, extract2d = FALSE),         pkg = \"grid\")  # }   ### Providing your own data structure ##########################################  # \\donttest{ ## Danger zone: An example with a new data structure (here: a list of *lists*) ## Note: - In this case, we most likely need to provide both plot1d and plot2d ##         (but not in this case here since arrow_1d_graphics() does not depend ##         on the data structure) ##       - Note that we still make use of zargs here. ##       - Also note that the variables are not correctly aligned anymore: ##         In the ggplot2 examples we guaranteed this by plot_indices(), ##         but here we don't. This then still produces our layout but the ##         x/y axis of adjacent plots might not be the same anymore. This is ##         fine if only a certain order of the plots is of interest, but ##         not a comparison between adjacent plots. z <- list(list(1:5, 2:1, 1:3), list(1:5, 1:2)) zenplot(z, n2dplots = 4, plot1d = \"arrow\", last1d = FALSE,         plot2d = function(zargs, ...) {             r <- unlist(zargs$x, recursive = FALSE)             num2d <- zargs$num/2 # plot number among 2d plots             x <- r[[num2d]]             y <- r[[num2d + 1]]             if(length(x) < length(y)) x <- rep(x, length.out = length(y))             else if(length(y) < length(x)) y <- rep(y, length.out = length(x))             plot(x, y, type = \"b\", xlab = \"\", ylab = \"\")         }, ispace = c(0.2, 0.2, 0.1, 0.1))  # }   ### Zenplots based on 3d lattice plots #########################################  # \\donttest{ library(lattice) library(grid) library(gridExtra)  ## Build a list of cloud() plots (trellis objects) ## Note: ## - 'grid' problem: Without print(), the below zenplot() may fail (e.g., ##   in fresh R sessions) with: 'Error in UseMethod(\"depth\") : ##   no applicable method for 'depth' applied to an object of class \"NULL\"' ## - col = \"black\" inside scales is needed to make the ticks show mycloud <- function(x, num) {        lim <- extendrange(0:1, f = 0.04)        print(cloud(x[, 3] ~ x[, 1] * x[, 2], xlim = lim, ylim = lim, zlim = lim,                    xlab = substitute(U[i.], list(i. = num)),                    ylab = substitute(U[i.], list(i. = num + 1)),                    zlab = substitute(U[i.], list(i. = num + 2)),                    zoom = 1, scales = list(arrows = FALSE, col = \"black\"),                    col = \"black\",                    par.settings = list(standard.theme(color = FALSE),                                        axis.line = list(col = \"transparent\"),                                        clip = list(panel = \"off\"))))    } plst.3d <- lapply(1:4, function(i)        mycloud(x[,i:(i+2)], num = i)) # list of trellis objects      ## Preparing the zenplot num <- length(plst.3d) ncols <- 2 turns <- c(rep(\"r\", 2*(ncols-1)), \"d\", \"d\",            rep(\"l\", 2*(ncols-1)), \"d\") plot2d <- function(zargs) {        num2d <- (zargs$num+1)/2        vp <- vport(zargs$ispace, xlim = 0:1, ylim = 0:1)        grob(p = zargs$x[[num2d]], vp = vp, cl = \"lattice\") # convert trellis to grid object        ## Note: For further plots, Work with        ##       gTree(children = gList(grob(zargs$x[[num2d]], vp = vp,        ##                                   cl = \"lattice\")))    }  ## Zenplot ## Note: We use a list of *plots* here already (not data) zenplot(plst.3d, turns = turns, n2dplots = num, pkg = \"grid\", first1d = FALSE,         last1d = FALSE, plot1d = \"arrow_1d_grid\", plot2d = plot2d)  # }"},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenplots-package.html","id":null,"dir":"Reference","previous_headings":"","what":"zenplots: Zigzag Expanded Navigation Plots — zenplots-package","title":"zenplots: Zigzag Expanded Navigation Plots — zenplots-package","text":"Zenplots, like pairs plots (scatterplot matrices), lay large number one- two-dimensional plots organized way.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenplots-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"zenplots: Zigzag Expanded Navigation Plots — zenplots-package","text":"Unlike pairs plots, zenplots can lay much larger number plots pursuing zigzagging layout (following zenpath) alternating one- two-dimensional plots. plots can created R's base graphics, grid graphics system, made interactive (brushing, etc.) using loon package.","code":""},{"path":[]},{"path":"https://great-northern-diver.github.io/zenplots/reference/zenplots-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"zenplots: Zigzag Expanded Navigation Plots — zenplots-package","text":"Maintainer: Wayne Oldford rwoldford@uwaterloo.ca Authors: Marius Hofert marius.hofert@uwaterloo.ca","code":""},{"path":"https://great-northern-diver.github.io/zenplots/news/index.html","id":"zenplots-107","dir":"Changelog","previous_headings":"","what":"zenplots 1.0.7","title":"zenplots 1.0.7","text":"updated examples, documentation, vignettes rely Rgraphviz package Bioconductor. Also added information user install package want draw graphs constructed zenplots fixed link graphNEL graph package documentation graph_pairs. added mvtnorm, crop suggests DESCRIPTION demo; also made explicit calls crop::dev..crop() SP500 demo.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/news/index.html","id":"zenplots-106","dir":"Changelog","previous_headings":"","what":"zenplots 1.0.6","title":"zenplots 1.0.6","text":"CRAN release: 2023-11-07 moved package loon “Suggests” list DESCRIPTON accommodate non-GI R use.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/news/index.html","id":"zenplots-105","dir":"Changelog","previous_headings":"","what":"zenplots 1.0.5","title":"zenplots 1.0.5","text":"CRAN release: 2023-08-25 zenplots package documentation file roxygen2’s @doctype package stopped adding -package alias (see roxygen2 issue 1491)","code":""},{"path":"https://great-northern-diver.github.io/zenplots/news/index.html","id":"zenplots-104","dir":"Changelog","previous_headings":"","what":"zenplots 1.0.4","title":"zenplots 1.0.4","text":"CRAN release: 2021-09-08 zenplot now (invisibly) returns list two extra classes zenplot identify structure zenplot one zengraphics, zenGrid, zenLoon indicate graphics package used. allows loon zenplots turned ggplots via package loon.ggplot documentation updated accordingly. updated documentation zenpath mention pairs must describe connected graph.","code":""},{"path":"https://great-northern-diver.github.io/zenplots/news/index.html","id":"zenplots-103","dir":"Changelog","previous_headings":"","what":"zenplots 1.0.3","title":"zenplots 1.0.3","text":"CRAN release: 2020-11-28 CRAN release","code":""}]
